<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>正则表达式，网易云课堂</title>
    <url>/2020/03/03/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%EF%BC%8C%E7%BD%91%E6%98%93%E4%BA%91%E8%AF%BE%E5%A0%82/</url>
    <content><![CDATA[<ul>
<li>是一个计算机科学概念</li>
<li>用于使用单个字符串来描述，匹配某个规则的字符串</li>
<li>常常用来检索，替换某些模式的文本</li>
</ul>
<h2 id="正则的写法"><a href="#正则的写法" class="headerlink" title="正则的写法"></a>正则的写法</h2><ul>
<li>‘ . ‘(点号)：表示任意一个字符，除了\n</li>
<li>‘[]’(中括号)，匹配括号中列举的任意数值，比如[L,Y,0]</li>
<li>\d: 任意一个数字</li>
<li>\D:除了数字都可以</li>
<li>\s:表空格，tab键</li>
<li>\S:除了空白字符</li>
<li>\w:单词字符，a-z,A-Z,0-9,_</li>
<li>\W:除了字母和数字</li>
<li>‘ * ‘(*号)：表示前面的内容重复零次或者多次</li>
<li>‘ + ‘,表面前面内容至少出现一次</li>
<li>‘ ? ‘:表面前面的内容出现一次或者零次</li>
<li>{m, n} 出现m到n次</li>
<li>^ :匹配字符串的开头</li>
<li>$:匹配字符串的结尾</li>
<li>()：对正则表达式的内容进行分组，从第一个括号开始</li>
<li>\A:只匹配只服从的开头</li>
<li>\Z:只匹配字符串末尾</li>
<li>| ：左右任意一个</li>
</ul>
<h2 id="re使用大致步骤"><a href="#re使用大致步骤" class="headerlink" title="re使用大致步骤"></a>re使用大致步骤</h2><ol>
<li>使用compile讲表示正则的字符串编译为一个pattern对象</li>
<li>利用Pattern对象提供的方法，对文本进行匹配，获取匹配结果</li>
<li>最后利用match对象提供的属性和方法后去信息，根据需要进行操作</li>
</ol>
<h2 id="re常用函数"><a href="#re常用函数" class="headerlink" title="re常用函数"></a>re常用函数</h2><ul>
<li>group()：获得一个或者多个匹配的字符串，当要获得所有匹配的字符串时候，直接用group(0)</li>
<li>start，字符串的起始位置</li>
<li>end:匹配字符串的结束位置</li>
<li>span。返回的结构跨度</li>
<li>match<ul>
<li>1.可以输入参数表示起始位置</li>
<li>2.查找的结果只包含一个，表示第一次匹配成功的内容</li>
<li>3.从起始位置匹配</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">text = <span class="string">'1234aash34235235fdosdf'</span></span><br><span class="line">p = re.compile(<span class="string">'[0-9]*'</span>)</span><br><span class="line">result = p.match(text)</span><br><span class="line">print(result)</span><br><span class="line">print(result.group())</span><br><span class="line">print(result.span())</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果</span></span><br><span class="line"><span class="string">1234</span></span><br><span class="line"><span class="string">(0, 4)</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>



<ul>
<li>search,查找匹配，有pos和endpos表示起始位置，最小返回量</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">text = <span class="string">'a1234aash34235235fdosdf'</span></span><br><span class="line">p = re.compile(<span class="string">r'[0-9]+'</span>)</span><br><span class="line">result = p.search(text)</span><br><span class="line">print(result.group())</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果</span></span><br><span class="line"><span class="string">1234</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li>findall：查找所有</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re</span><br><span class="line">text &#x3D; &#39;a1234aash34235235fdosdf&#39;</span><br><span class="line">p &#x3D; re.compile(r&#39;[0-9]+&#39;)</span><br><span class="line">result &#x3D; p.findall(text)</span><br><span class="line">print(result)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">输出结果</span><br><span class="line">[&#39;1234&#39;, &#39;34235235&#39;]</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li>finditer:查找，返回一个iter结果</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">text = <span class="string">'a1234aash34235235fdosdf'</span></span><br><span class="line">p = re.compile(<span class="string">r'[0-9]+'</span>)</span><br><span class="line">result = p.finditer(text)</span><br><span class="line">print(result)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">    print(i)</span><br><span class="line">    print(i.group())</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果</span></span><br><span class="line"><span class="string">&lt;callable_iterator object at 0x7f5abe45be50&gt;</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(1, 5), match='1234'&gt;</span></span><br><span class="line"><span class="string">1234</span></span><br><span class="line"><span class="string">&lt;re.Match object; span=(9, 17), match='34235235'&gt;</span></span><br><span class="line"><span class="string">34235235</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li>sub替换，符合条件的正则就进行替换</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">text = <span class="string">'Hello I am 4293!'</span></span><br><span class="line">p = re.compile(<span class="string">r'[0-9]+'</span>)</span><br><span class="line">result = p.sub(<span class="string">'999'</span>, text)</span><br><span class="line">print(result)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果</span></span><br><span class="line"><span class="string">Hello I am 999!</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>匹配中文</p>
<ul>
<li>[\u4e00-\u9fa5]，不包括全角标点</li>
</ul>
</li>
<li><p>贪婪 *</p>
</li>
<li><p>非贪婪 ?</p>
</li>
<li><p>正则默认使用贪婪匹配</p>
</li>
<li><p>‘. * ‘和’ .*? ‘</p>
</li>
<li><p>爬虫实例1</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">url = <span class="string">'https://touch.10086.cn/list/135_290_290_0_0_0_0.html'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) \</span></span><br><span class="line"><span class="string">    AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.122 Mobile Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">response = requests.get(url, headers=headers)</span><br><span class="line">text = response.text  <span class="comment"># text网页</span></span><br><span class="line">p = re.compile(<span class="string">r'[0-9]&#123;3&#125;.&#123;1&#125;[0-9]&#123;4&#125;.&#123;1&#125;[0-9]&#123;4&#125;'</span>)</span><br><span class="line">result = p.findall(text)</span><br><span class="line">print(result)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果</span></span><br><span class="line"><span class="string">['198 0298 7376', '198 2908 5092', '198 2908 5273', '198 2908 7381', '198 2921 1079',</span></span><br><span class="line"><span class="string"> '198 2921 6237', '198 2921 6270', '198 2921 6573']</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>安装catalyst</title>
    <url>/2020/03/01/python%E9%87%91%E8%9E%8D%E9%87%8F%E5%8C%96-catalyst/</url>
    <content><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li>官网链接<a href="https://enigma.co/catalyst/install.htm" target="_blank" rel="noopener">跳转</a></li>
<li>安装必要依赖</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install libatlas-base-dev python-dev gfortran pkg-config libfreetype6-dev</span><br></pre></td></tr></table></figure>

<ul>
<li>安装HDF5(十分重要)<ul>
<li>下载地址：<a href="https://support.hdfgroup.org/ftp/HDF5/releases/" target="_blank" rel="noopener">跳转</a>, 下载tar.gz结尾文件，解压，依次输入，第三步比较慢，耐心等待</li>
</ul>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/usr/local/hdf5     # 配置安装路径</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo make -j8   # 编译</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo make check</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo make install</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo make check-install</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export PATH="$PATH:/usr/local/hdf5"    # 保险起见输一个</span><br></pre></td></tr></table></figure>

<ul>
<li>创建虚拟环境</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install virtualenv</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> virtualenv catalyst-venv</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> ./catalyst-venv/bin/activate</span></span><br></pre></td></tr></table></figure>

<ul>
<li>升级pip、setuptools</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install --upgrade pip setuptools</span><br></pre></td></tr></table></figure>

<ul>
<li>安装numpy</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install numpy</span><br></pre></td></tr></table></figure>

<h2 id="安装catalyst"><a href="#安装catalyst" class="headerlink" title="安装catalyst"></a>安装catalyst</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install --pre enigma-catalyst</span><br></pre></td></tr></table></figure>

<ul>
<li>测试一下是否安装成功</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">catalyst --version</span><br></pre></td></tr></table></figure>

<h2 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h2><ul>
<li>下面是导入bitfinex的日线数据（需要fq）</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">catalyst ingest-exchange -x bitfinex -i btc_usdt -f daily</span><br></pre></td></tr></table></figure>

<ul>
<li>也可以导入分钟数据(建议用这个)</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">catalyst ingest-exchange -x bitfinex -i btc_usdt -f minute</span><br></pre></td></tr></table></figure>

<ul>
<li>导入数据帮助</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">catalyst ingest-exchange --help</span><br></pre></td></tr></table></figure>

<ul>
<li>测试代码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> catalyst.api <span class="keyword">import</span> order, record, symbol</span><br><span class="line"><span class="keyword">from</span> catalyst <span class="keyword">import</span> run_algorithm</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(context)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    用于内容的初始化</span></span><br><span class="line"><span class="string">    context是一个命令空间用于存放变量</span></span><br><span class="line"><span class="string">    :param context: 内容包括很多数据，其中一个asset可以设置交易对</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    context.asset = symbol(<span class="string">'btc_usd'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_data</span><span class="params">(context, data)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    用于模拟交易</span></span><br><span class="line"><span class="string">    :param context: 命名空间，用于存放变量</span></span><br><span class="line"><span class="string">    :param data:模拟数据来源</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="comment"># 每个交易周期买入1个币种，卖出为-1</span></span><br><span class="line">    order(context.asset, <span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 记录每个交易周期的比特币价格</span></span><br><span class="line">    record(btc=data.current(context.asset, <span class="string">'price'</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    run_algorithm(</span><br><span class="line">        capital_base=<span class="number">10000</span>,  <span class="comment"># 回溯的启动资金</span></span><br><span class="line">        data_frequency=<span class="string">'daily'</span>,  <span class="comment"># 日线或者分钟线</span></span><br><span class="line">        initialize=initialize,  <span class="comment"># 初始化函数</span></span><br><span class="line">        handle_data=handle_data,  <span class="comment"># 用于处理算法的数据函数</span></span><br><span class="line">        analyze=<span class="literal">None</span>,</span><br><span class="line">        exchange_name=<span class="string">'bitfinex'</span>,  <span class="comment"># 交易所名称</span></span><br><span class="line">        algo_namespace=<span class="string">'buy_btc_simple'</span>,  <span class="comment"># 算法的命名空间</span></span><br><span class="line">        quote_currency=<span class="string">'usdt'</span>,  <span class="comment"># 基础货币名称</span></span><br><span class="line">        start=pd.to_datetime(<span class="string">'2016-03-01'</span>, utc=<span class="literal">True</span>),  <span class="comment"># 开始时间</span></span><br><span class="line">        end=pd.to_datetime(<span class="string">'2017-10-31'</span>, utc=<span class="literal">True</span>),  <span class="comment"># 结束时间</span></span><br><span class="line">        output=<span class="string">'buy_btc_simple_out.pickle'</span>  <span class="comment"># 文件输出,只能是piｃｋle文件</span></span><br><span class="line">    )</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python量化</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>金融量化</tag>
      </tags>
  </entry>
  <entry>
    <title>python复习100天--第1天</title>
    <url>/2020/02/20/python%E5%A4%8D%E4%B9%A0100%E5%A4%A9--%E7%AC%AC1%E5%A4%A9/</url>
    <content><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="Python安装"><a href="#Python安装" class="headerlink" title="Python安装"></a>Python安装</h3><ul>
<li><a href="https://jingyan.baidu.com/article/cb5d6105a32b5f005c2fe0ea.html" target="_blank" rel="noopener">百度经验</a></li>
</ul>
<h3 id="conda安装"><a href="#conda安装" class="headerlink" title="conda安装"></a>conda安装</h3><ul>
<li><a href="https://baijiahao.baidu.com/s?id=1631405104775034521&wfr=spider&for=pc" target="_blank" rel="noopener">百度新闻</a></li>
<li>conda为全版，miniconda为精简版，新手推荐conda</li>
</ul>
<h3 id="Pycharm安装与使用"><a href="#Pycharm安装与使用" class="headerlink" title="Pycharm安装与使用"></a>Pycharm安装与使用</h3><ul>
<li><a href="https://blog.csdn.net/pdcfighting/article/details/80297499" target="_blank" rel="noopener">CSDN博客</a></li>
<li>安装普通版即可</li>
</ul>
<h3 id="Pycharm汉化"><a href="#Pycharm汉化" class="headerlink" title="Pycharm汉化"></a>Pycharm汉化</h3><ul>
<li><p><a href="https://www.pingfangx.com/xx/translation/jetbrains/download/baidu" target="_blank" rel="noopener">百度云链接</a>  密码：<code>1234</code></p>
</li>
<li><p>下载对应的jar文件，然后丢到pycharm安装位置的对应lib文件夹即可汉化。</p>
</li>
</ul>
<h2 id="查看Python版本"><a href="#查看Python版本" class="headerlink" title="查看Python版本"></a>查看Python版本</h2><p>我们可以在命令窗口(Windows 使用 win+R 调出 cmd 运行框)使用以下命令查看我们使用的 Python 版本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python -V</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/20/python%E5%A4%8D%E4%B9%A0100%E5%A4%A9--%E7%AC%AC1%E5%A4%A9/image-20200220165005194.png" alt="image-20200220165005194"></p>
<h2 id="第一个Python程序"><a href="#第一个Python程序" class="headerlink" title="第一个Python程序"></a>第一个Python程序</h2><p>打开Pycharm，新建一个项目，名字任意。</p>
<p>输入下面的命令，打印“Hello World”</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"Hello World!"</span>)</span><br></pre></td></tr></table></figure>

<p>也可以直接在命令行窗口输入</p>
<p><img src="/2020/02/20/python%E5%A4%8D%E4%B9%A0100%E5%A4%A9--%E7%AC%AC1%E5%A4%A9/image-20200220165328661.png" alt="image-20200220165328661"></p>
<h2 id="变量命名规则"><a href="#变量命名规则" class="headerlink" title="变量命名规则"></a>变量命名规则</h2><ul>
<li><p>第一个字符必须是字母表中字母或下划线 </p>
</li>
<li><p>其他的部分由字母、数字和下划线组成</p>
</li>
<li><p>普通变量命名推荐使用英文单词小写+下划线+英文单词</p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_sudent_num = <span class="number">10</span>  <span class="comment"># 我教的学生数量为10</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>变量对大小写敏感。例如：变量A和变量a不一样。</p>
</li>
</ul>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul>
<li><p>注释不会运行，而是为了方便人看。</p>
</li>
<li><p>注释共有三种方法。</p>
</li>
<li><p><code>#</code>注释一行，成对的单引号<code>&#39;&#39;&#39;</code>和成对的多引号注释多行<code>&quot;&quot;&quot;</code></p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这是一个注释</span></span><br><span class="line">print(<span class="string">'你好注释'</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">这也是注释</span></span><br><span class="line"><span class="string">这还是注释</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">print(<span class="string">'你好注释2'</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">你好注释</span><br><span class="line">你好注释2</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h2><p>在Python中，一个tab键（通常为4个空格）代表一个缩进，缩进可以用来表示代码的控制域，代替其它编程语言的{}，()等等。</p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span>  <span class="comment">#定义一个函数</span></span><br><span class="line">	print(<span class="number">1</span>)</span><br><span class="line">print(<span class="number">2</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>这个例子中：print(1)产生了缩进，故print(1)属于fun函数的作用域。fun函数并没有运行，所以print(1)不会打印，而print(2)属于fun作用域外，所以会运行。</p>
<h2 id="多行语句"><a href="#多行语句" class="headerlink" title="多行语句"></a>多行语句</h2><ul>
<li><p>当程序过长的时候，无法全部展示出来时，需要用反斜杠来代表本行未完，下一行继续接着。</p>
<p>eg:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">print(&quot;床前明月光，疑是地上霜。\</span><br><span class="line">举头望明月，低头思故乡。&quot;)</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/20/python%E5%A4%8D%E4%B9%A0100%E5%A4%A9--%E7%AC%AC1%E5%A4%A9/image-20200220171418580.png" alt="image-20200220171418580"></p>
</li>
</ul>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><ul>
<li>int(整数)：1,2,3,4,5…</li>
<li>bool(布尔型):  True or False</li>
<li>float(浮点数，或者称小数):  1.31，3.543434</li>
<li>complex(复数):  1+3j,其中1为实部，3j为虚部。</li>
</ul>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul>
<li><p>基本用法</p>
<p>eg:</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"我是一个字符串"</span>)</span><br></pre></td></tr></table></figure>

<p>  输出结果：</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">我是一个字符串</span><br></pre></td></tr></table></figure>
</li>
<li><p>字符串的单引号和双引号没有任何区别</p>
</li>
<li><p>字符串切片</p>
<ul>
<li><p>字符串利用中括号进行切片</p>
</li>
<li><p>字符串切片的索引是从0开始，而不是1开始</p>
</li>
<li><p>取单个字符：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_str = <span class="string">"Hello Python"</span></span><br><span class="line">print(my_str)  <span class="comment"># 打印字符串</span></span><br><span class="line">print(my_str[<span class="number">0</span>])  <span class="comment"># 取第一个字符</span></span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello Python</span><br><span class="line">H</span><br></pre></td></tr></table></figure>
</li>
<li><p>如果要取多个字符，中括号中间用冒号隔开，代表从哪里开始到哪里结束，注意，切片结果不包括结尾。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_str = <span class="string">"Hello Python"</span></span><br><span class="line">print(my_str)  <span class="comment"># 打印字符串</span></span><br><span class="line">print(my_str[<span class="number">0</span>])  <span class="comment"># 取第一个字符</span></span><br><span class="line">print(my_str[<span class="number">0</span>:<span class="number">3</span>])  <span class="comment"># 取0,1,2字符</span></span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello Python</span><br><span class="line">H</span><br><span class="line">Hel</span><br></pre></td></tr></table></figure>
</li>
<li><p>切片默认步长是1，如果要改变切片步长，可以在中括号里面放两个冒号，第二个冒号后面代表切片步长。</p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_str = <span class="string">"Hello Python"</span></span><br><span class="line">print(my_str)  <span class="comment"># 打印字符串</span></span><br><span class="line">print(my_str[<span class="number">0</span>])  <span class="comment"># 取第一个字符</span></span><br><span class="line">print(my_str[<span class="number">0</span>:<span class="number">3</span>])  <span class="comment"># 取0,1,2字符</span></span><br><span class="line">print(my_str[<span class="number">0</span>: <span class="number">5</span>: <span class="number">2</span>])  <span class="comment"># 取0,2,4三个字符</span></span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Hello Python</span><br><span class="line">H</span><br><span class="line">Hel</span><br><span class="line">Hlo</span><br></pre></td></tr></table></figure>
</li>
<li><p>倒序切片</p>
</li>
<li><p>可以用负数来代表倒数第一个字符</p>
</li>
<li><p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">my_str = <span class="string">"Hello Python"</span></span><br><span class="line">print(my_str)  <span class="comment"># 打印字符串</span></span><br><span class="line">print(my_str[<span class="number">-1</span>])  <span class="comment"># 取最后一个字符</span></span><br><span class="line">print(my_str[<span class="number">-3</span>: <span class="number">-1</span>])  <span class="comment"># 取倒数第三个到倒数第一个，不包括倒数第一个</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>输出结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Hello Python</span><br><span class="line">n</span><br><span class="line">ho</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>用户输入</p>
<ul>
<li><p>可以用input函数来接受用户输入的数据</p>
</li>
<li><p>input函数里面可以输入字符串用来提示用户</p>
</li>
<li><p>input最终的到结果是一个字符串</p>
</li>
<li><p>eg</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = input(<span class="string">'请给我输入一个数字:'</span>)</span><br><span class="line">print(a)</span><br><span class="line">print(type(a))  <span class="comment"># type函数用于输出数据的类型</span></span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">请给我输入一个数字:<span class="number">100</span></span><br><span class="line"><span class="number">100</span></span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">str</span>'&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>常用转义字符</p>
<ul>
<li><p>Python在打印字符串时，常用反斜杠加其它字符用来指带特定的用途。</p>
</li>
<li><p>\n: 代表回车。</p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"1\n2"</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>\t:横向制表符。</p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"姓名\t性别\t年龄"</span>)</span><br><span class="line">print(<span class="string">"张三\t男\t22"</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">姓名	性别	年龄</span><br><span class="line">张三	男	<span class="number">22</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>其它常用转义字符如下：</p>
<p><img src="/2020/02/20/python%E5%A4%8D%E4%B9%A0100%E5%A4%A9--%E7%AC%AC1%E5%A4%A9/image-20200220180741434.png" alt="image-20200220180741434"></p>
</li>
</ul>
</li>
<li><p>打印不回车</p>
<ul>
<li><p>输出不换行, print函数里面有个参数是<code>end=&#39;\n&#39;</code>，\n代表回车。</p>
</li>
<li><p>想要不回车输出，可以用空格或者其它字符代替</p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'1'</span>, end=<span class="string">' '</span>)</span><br><span class="line">print(<span class="string">'2'</span>, end=<span class="string">' '</span>)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>格式化输出</p>
<ul>
<li><p>当需要在字符串中加一些变量的时候，常常用到格式化输出</p>
</li>
<li><p>格式化输出共有三种方法：<code>+</code>、<code>%</code>、<code>format</code></p>
</li>
<li><p><code>+</code>号常用于字符串拼接。</p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">'张三'</span></span><br><span class="line">sex = <span class="string">'男'</span></span><br><span class="line">age = <span class="string">'22'</span></span><br><span class="line">s = <span class="string">'我叫：'</span> + name + <span class="string">',性别：'</span> + sex + <span class="string">',今年'</span> + age + <span class="string">'岁了。'</span></span><br><span class="line">print(s)</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">我叫：张三,性别：男,今年22岁了。</span><br></pre></td></tr></table></figure>
</li>
<li><p>一般只有新手才会用上面的方法，常用的一般是<code>%</code>和<code>format</code></p>
</li>
<li><p>%接一个特定的字母可以用来代表特定的数据类型</p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">'张三'</span></span><br><span class="line">sex = <span class="string">'男'</span></span><br><span class="line">age = <span class="number">22</span></span><br><span class="line">print(<span class="string">'我叫%s, 性别%s,今年%d了'</span> %(name, sex, age))</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">我叫张三, 性别男,今年<span class="number">22</span>了</span><br></pre></td></tr></table></figure>

<p>上面的%s代表字符串类型，%d代表整数类型，还有%f代表浮点数类型（也就是小数）</p>
<p>更多类型可以看这个帖子：<a href="https://www.cnblogs.com/lovejh/p/9201026.html" target="_blank" rel="noopener">https://www.cnblogs.com/lovejh/p/9201026.html</a></p>
</li>
<li><p>format函数是字符串这个类别自带的函数，调用的时候直接用<code>str.format(变量1，变量2...)</code>即可调用。str中应含有大括号用于匹配。</p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">'张三'</span></span><br><span class="line">sex = <span class="string">'男'</span></span><br><span class="line">age = <span class="number">22</span></span><br><span class="line">print(<span class="string">'我叫&#123;&#125;, 性别&#123;&#125;,今年&#123;&#125;了'</span>.format(name, sex, age))</span><br></pre></td></tr></table></figure>

<p>大括号中可以包含数字，用来匹配第N个变量。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">'我叫&#123;0&#125;, 性别&#123;1&#125;,今年&#123;2&#125;了'</span>.format(name, sex, age))</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">我叫张三, 性别男,今年<span class="number">22</span>了</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="未完待续。。。。"><a href="#未完待续。。。。" class="headerlink" title="未完待续。。。。"></a>未完待续。。。。</h2><ul>
<li>博客首发，地址：<a href="https://www.vbahome.cn" target="_blank" rel="noopener">https://www.vbahome.cn</a></li>
</ul>
]]></content>
      <categories>
        <category>python复习</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>python复习100天--第2天</title>
    <url>/2020/02/21/python%E5%A4%8D%E4%B9%A0100%E5%A4%A9--%E7%AC%AC2%E5%A4%A9/</url>
    <content><![CDATA[<h2 id="Python基本数据类型"><a href="#Python基本数据类型" class="headerlink" title="Python基本数据类型"></a>Python基本数据类型</h2><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><ul>
<li><p>类型:int、float、bool、complex</p>
</li>
<li><p>数字的四则运算</p>
<p>  eg:</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="number">1</span> + <span class="number">2</span>)  <span class="comment"># 整数相加得整数：3</span></span><br><span class="line">print(<span class="number">2.1</span> - <span class="number">1.1</span>)  <span class="comment"># 浮点数相减得浮点数:1.0</span></span><br><span class="line">print(<span class="number">1</span> * <span class="number">2</span>)  <span class="comment"># 整数相乘得整数:2</span></span><br><span class="line">print(<span class="number">2</span> / <span class="number">1</span>)  <span class="comment"># 整数相除得浮点数:2.0</span></span><br><span class="line">print(<span class="number">9</span> // <span class="number">2</span>)  <span class="comment"># 取整除法:4</span></span><br><span class="line">print(<span class="number">9</span> % <span class="number">2</span>)  <span class="comment"># 求余除法:1</span></span><br><span class="line">print(<span class="number">3</span> ** <span class="number">3</span>)  <span class="comment"># 求3的3次方:27</span></span><br></pre></td></tr></table></figure>

<p>  一般来说，同类型的数字进行四则运算会得到同类型的数字，但是除法不是。因为除法可能会出现小数，所以一般在进行除法运算的时候，Python会自动把整数变成浮点数之后，再进行运算，所以，整数相除是浮点数。</p>
</li>
<li><p>数字的类型转换。</p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="number">1</span> + <span class="number">1.1</span>)  <span class="comment"># 整数加小数得小数：2.1</span></span><br><span class="line">print(<span class="number">1</span> + <span class="literal">True</span>)  <span class="comment"># 整数加布尔型得整数:2</span></span><br><span class="line">print(<span class="number">1</span> + (<span class="number">2</span> + <span class="number">3j</span>))  <span class="comment"># 整数加复数得复数:3+3j</span></span><br></pre></td></tr></table></figure>

<p>python会自动把低精度的往高精度上转换。如果是整数遇到了浮点数，整数自动转浮点数（浮点数能存储的东西多）；同样的，如果是整数遇到了布尔型，布尔型自动转整数（整数储存的数据比布尔型多）。整数与复数的转换规则也是如此。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 布尔型的转换规则</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">布尔转整数</span></span><br><span class="line"><span class="string">Ture -&gt;  1</span></span><br><span class="line"><span class="string">False -&gt; 0</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">print(int(<span class="literal">True</span>))  <span class="comment"># 布尔转整数:1</span></span><br><span class="line">print(int(<span class="literal">False</span>))  <span class="comment"># 布尔转整数：0</span></span><br><span class="line"><span class="comment"># int函数可以把其它数据类型转成整数</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">整数转布尔</span></span><br><span class="line"><span class="string">非零-&gt; True</span></span><br><span class="line"><span class="string">0 -&gt; False</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">print(bool(<span class="number">10</span>))  <span class="comment"># 整数转布尔：True</span></span><br><span class="line">print(bool(<span class="number">-10</span>))  <span class="comment"># 整数转布尔：Ture</span></span><br><span class="line">print(bool(<span class="number">0</span>))  <span class="comment"># 整数转布尔：False</span></span><br></pre></td></tr></table></figure>

<p>注：int函数可将数据转整数，float函数可以将数据转浮点型，bool函数将数据转布尔型，complex函数将数据转复数。</p>
</li>
</ul>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul>
<li><p>字符串切片：上节已讲。具体可以看<a href="https://www.vbahome.cn" target="_blank" rel="noopener">https://www.vbahome.cn</a></p>
</li>
<li><p>关于反斜杠转义：如果不想让它转义，可以加一个r，代表raw，原生不动。这样反斜杠就不会转义了。</p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">r'1\n2'</span>)  <span class="comment"># r代表不转义，此处输出：1\n2</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>常用字符串内置函数</p>
<ul>
<li><p>len:用于计算字符串的长度</p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(len(<span class="string">'你好玛利亚'</span>))  <span class="comment"># 输出结果为５</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>常用字符串内置方法</p>
<ul>
<li><p>join: 可以使用特定的字符将一个序列拼(通常为元组和列表)接成一个字符串</p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="string">'你好'</span>, <span class="string">','</span>, <span class="string">'玛利亚'</span>, <span class="string">'!'</span>]  <span class="comment"># 后面会讲list，这里只是一个示意</span></span><br><span class="line">a = <span class="string">''</span>.join(list1)  <span class="comment"># 利用空字符串把列表拼接成一个字符串</span></span><br><span class="line">print(a)  <span class="comment"># 输出结果:你好,玛利亚!</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>replace:用于查找特定的字符串并替换成新的字符串</p>
</li>
<li><pre><code class="python">a = <span class="string">'我爱你，湖南'</span>
a = a.replace(<span class="string">'湖南'</span>, <span class="string">'中国'</span>)  <span class="comment"># 将湖南替换为中国，并且重新赋值给ａ</span>
print(a)  <span class="comment"># 输出结果: 我爱你，中国</span>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- find:查找某个字符串是否在该字符串内，默认只返回第一个匹配的字符串的第一个字符所在位置.</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;python</span><br><span class="line">  a &#x3D; &#39;Hello world,Hello China&#39;</span><br><span class="line">  result1 &#x3D; a.find(&#39;Hello&#39;)  # 找Hello的位置,结果: 0</span><br><span class="line">  print(result1)</span><br></pre></td></tr></table></figure></code></pre>
</li>
<li><p>split:以特定字符串进行切割，常用于语句分词，分词后的结果是一个列表．</p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">'Hello world,Hello China'</span></span><br><span class="line">print(a.split(<span class="string">' '</span>))  <span class="comment"># 以空格进行分词</span></span><br><span class="line"><span class="comment"># 输出结果：['Hello', 'world,Hello', 'China']</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>title: 将字符串标题化，也就是所有单词首字母大写</p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">'hello world,hello china'</span></span><br><span class="line">print(a.title())  <span class="comment"># 标题化输出</span></span><br><span class="line"><span class="comment"># 输出结果：Hello World,Hello China</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>upper:将单词的所有字母都变成大写</p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">'hello world,hello china'</span></span><br><span class="line">print(a.upper())  <span class="comment"># 小写单词转大写</span></span><br><span class="line"><span class="comment"># 输出结果：HELLO WORLD,HELLO CHINA</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>lower: 将所有单词大写转小写</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">'HELLO WORLD,HELLO CHINA'</span></span><br><span class="line">print(a.lower())  <span class="comment"># 大写单词转小写</span></span><br><span class="line"><span class="comment"># 输出结果：hello world,hello china</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>startwith: 是否以某个字符串开头，返回值为布尔型</p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">'hello world,hello china'</span></span><br><span class="line">print(a.startswith(<span class="string">'hello'</span>))  <span class="comment"># 判断是否以hello开头</span></span><br><span class="line"><span class="comment"># 输出结果：True</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>endswith: 是否以某个字符结尾，返回值为布尔型</p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">'hello world,hello china'</span></span><br><span class="line">print(a.endswith(<span class="string">'china'</span>))  <span class="comment"># 判断是否以hello开头</span></span><br><span class="line"><span class="comment"># 输出结果：True</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>strip: 删除两边多余的字符，默认是删除空格</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">'  hello world,hello china  '</span></span><br><span class="line">print(a.strip())  <span class="comment"># 删除两边的空格</span></span><br><span class="line">print(a.strip().strip(<span class="string">'a'</span>))  <span class="comment"># 删完空格再删两边的字符a</span></span><br><span class="line"><span class="comment"># 输出结果：</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">hello world,hello china</span></span><br><span class="line"><span class="string">hello world,hello chin</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>encode:将字符串编码，默认是utf-8</p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">'  hello world,hello china  '</span></span><br><span class="line">print(a.encode(<span class="string">'utf-8'</span>))  <span class="comment"># 默认是utf-8,可以不填</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">b'  hello world,hello china  '</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<p>上面多了一个b,代表是二进制格式.</p>
</li>
<li><p>decode:将二进制解码成字符串,默认用utf-8进行解码</p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">b'  hello world,hello china  '</span></span><br><span class="line">b = <span class="string">b'\xe6\x88\x91\xe7\x88\xb1Python'</span></span><br><span class="line">print(a.decode())  <span class="comment"># 默认是utf-8,可以不填</span></span><br><span class="line">print(b.decode(<span class="string">'utf-8'</span>))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">  hello world,hello china  </span></span><br><span class="line"><span class="string">我爱Python</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<ul>
<li><p>字符串的复制</p>
<ul>
<li><p>字符串常用*号代表复制,后面接数字代表复制多少次</p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">'hello'</span></span><br><span class="line">print(a*<span class="number">10</span>)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">hellohellohellohellohellohellohellohellohellohello</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>字符串转数字</p>
<ul>
<li><p>如果是数字构成的字符串，可以将该字符串转成浮点型数字</p>
</li>
<li><p>注意：<strong>字符串只能转浮点型数字，不能转整数形</strong></p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="string">'1.0'</span></span><br><span class="line">b = <span class="string">'2'</span></span><br><span class="line">print(type(a))</span><br><span class="line">print(type(b))</span><br><span class="line">c = float(a)</span><br><span class="line">d = float(b)</span><br><span class="line">print(type(c))</span><br><span class="line">print(type(d))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">&lt;class 'str'&gt;</span></span><br><span class="line"><span class="string">&lt;class 'str'&gt;</span></span><br><span class="line"><span class="string">&lt;class 'float'&gt;</span></span><br><span class="line"><span class="string">&lt;class 'float'&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>数字转字符串</p>
<ul>
<li><p>直接用str函数即可</p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">print(type(<span class="number">1</span>))</span><br><span class="line">b = str(<span class="number">1</span>)</span><br><span class="line">print(type(b))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">&lt;class 'int'&gt;</span></span><br><span class="line"><span class="string">&lt;class 'str'&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul>
<li><p>list:代表多个有序数据的集合</p>
</li>
<li><p>列表是有序的,  每个列表元素都有一个“序号”，一般称为索引</p>
</li>
<li><p>索引是从零开始,然后依次加1</p>
</li>
<li><p>想要获取列表的元素,需要用中括号加索引的位置</p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">print(a[<span class="number">1</span>])  <span class="comment"># 取第二个索引所在的元素值</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>列表的创建方法</p>
<ul>
<li>法一:  和上面一样用中括号然后加逗号隔开</li>
<li>法二:   利用list函数生成列表</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = list()  <span class="comment"># 创建一个空列表</span></span><br><span class="line">b = list(<span class="string">'ashofsdo'</span>)  <span class="comment"># 将字符串变成列表,默认一个字符串一个列表元素</span></span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line">print(type(a))</span><br><span class="line">print(type(b))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[]</span></span><br><span class="line"><span class="string">['a', 's', 'h', 'o', 'f', 's', 'd', 'o']</span></span><br><span class="line"><span class="string">&lt;class 'list'&gt;</span></span><br><span class="line"><span class="string">&lt;class 'list'&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>列表常搭配的函数:range</p>
<ul>
<li>range函数用于生成一个数字范围，一般以零开始,需要用list转成列表</li>
<li>range生成的数字范围可迭代，常用于循环(此处不需要过于理解)</li>
</ul>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = range(<span class="number">10</span>)  <span class="comment"># 生成一个从零开始到10结束的范围,不包括10</span></span><br><span class="line">a_list = list(a)  <span class="comment"># 将该范围转为列表</span></span><br><span class="line">print(a)</span><br><span class="line">print(type(a))</span><br><span class="line">print(a_list)</span><br><span class="line">print(type(a_list))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">range(0, 10)</span></span><br><span class="line"><span class="string">&lt;class 'range'&gt;</span></span><br><span class="line"><span class="string">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="string">&lt;class 'list'&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li>range可以自定义开头位置，用逗号隔开</li>
</ul>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = list(range(<span class="number">1</span>, <span class="number">10</span>))  <span class="comment"># 从1开始,到10结束,不包括10</span></span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li>range可以自定义步长，默认是1，可以加一个逗号，第二个逗号右边表示步长.</li>
</ul>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = list(range(<span class="number">1</span>, <span class="number">30</span>, <span class="number">3</span>))  <span class="comment"># 从1开始,到30结束,不包括30,每隔3取一个</span></span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[1, 4, 7, 10, 13, 16, 19, 22, 25, 28]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>列表的切片</p>
<ul>
<li>切片方法和字符串一样的</li>
<li>切片后可以重新赋值(注意:只有字符串、列表,、字典可以重新赋值)</li>
</ul>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = list(range(<span class="number">1</span>, <span class="number">10</span>))  <span class="comment"># 从1开始,到30结束,不包括30,每隔3取一个</span></span><br><span class="line">print(<span class="string">'原来的a为: \n'</span>, a)</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">100</span>  <span class="comment"># 对a[0]重新赋值</span></span><br><span class="line">print(<span class="string">'重新赋值后的a为:\n'</span>, a)</span><br><span class="line">print(a[<span class="number">0</span>:<span class="number">5</span>])  <span class="comment"># 取第一个到第5个值,不包括a[5],也就是不包括第6个值</span></span><br><span class="line">print(a[<span class="number">0</span>:<span class="number">7</span>:<span class="number">2</span>])  <span class="comment"># 从第一个取到第7个,不包括a[7],每隔两个取一个</span></span><br><span class="line">print(a[<span class="number">-5</span>: <span class="number">-1</span>: <span class="number">2</span>])  <span class="comment"># 从倒数第五个取到倒数第一个,不包括倒数第一个,每隔两个取一个</span></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">原来的a为: </span></span><br><span class="line"><span class="string"> [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="string">重新赋值后的a为:</span></span><br><span class="line"><span class="string"> [100, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="string">[100, 2, 3, 4, 5]</span></span><br><span class="line"><span class="string">[100, 3, 5, 7]</span></span><br><span class="line"><span class="string">[5, 7]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>列表的常用函数</p>
<ul>
<li><p>len:计算列表中元素的个数</p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = list(range(<span class="number">10</span>))</span><br><span class="line">  print(len(a))</span><br><span class="line">  <span class="comment"># 输出结果</span></span><br><span class="line">  <span class="string">"""</span></span><br><span class="line"><span class="string">  10</span></span><br><span class="line"><span class="string">  """</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>max:找到列表中的最大值</p>
</li>
<li><p>min函数代表找到列表中的最小元素</p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = list(range(<span class="number">10</span>))</span><br><span class="line">print(max(a))</span><br><span class="line">print(min(a))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">9</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>列表的常用方法</p>
<ul>
<li><p>append:末尾追加元素</p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = list(range(<span class="number">10</span>))</span><br><span class="line">a.append(<span class="number">11</span>)</span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>extend：用于拼接列表</p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">  list2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line">  list1.extend(list2)</span><br><span class="line">  print(list1)</span><br><span class="line">  <span class="string">"""</span></span><br><span class="line"><span class="string">  输出结果：</span></span><br><span class="line"><span class="string">  [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<ul>
<li><p>copy函数，常用于列表的复制，防止新列表更新后污染旧的列表。</p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  a = list(range(<span class="number">10</span>))</span><br><span class="line">  b = a.copy()  <span class="comment"># 复制列表a</span></span><br><span class="line">  b[<span class="number">0</span>] = <span class="number">100</span></span><br><span class="line">  print(a)</span><br><span class="line">  print(b)</span><br><span class="line">  <span class="comment"># 输出结果</span></span><br><span class="line">  <span class="string">"""</span></span><br><span class="line"><span class="string">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="string">  [100, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>insert: 在置顶的位置插入元素</p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = list(range(<span class="number">10</span>))</span><br><span class="line">a.insert(<span class="number">4</span>, <span class="number">100</span>)  <span class="comment"># 在第五个索引后面插入100</span></span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[0, 1, 2, 3, 100, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>index: 找到某个元素所匹配的索引位置</p>
<p>  eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">   a = [<span class="string">'张三'</span>, <span class="string">'李四'</span>, <span class="string">'王二小'</span>]</span><br><span class="line">   print(a.index(<span class="string">'李四'</span>))</span><br><span class="line">   b = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">4</span>]</span><br><span class="line">   print(b.index(max(b)))  <span class="comment"># 先找到b的最大值，再找到最大值对应的索引</span></span><br><span class="line">   <span class="comment"># 输出结果</span></span><br><span class="line">   <span class="string">"""</span></span><br><span class="line"><span class="string">   1</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">   """</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>sort: 对列表进行排序</p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> b = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">4</span>]</span><br><span class="line"> b.sort()  <span class="comment"># 对b进行排序</span></span><br><span class="line"> print(b)  </span><br><span class="line"> <span class="comment"># 输出结果</span></span><br><span class="line"> <span class="string">"""</span></span><br><span class="line"><span class="string">[1, 2, 4, 5, 6, 9]</span></span><br><span class="line"><span class="string"> """</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>reverse：对列表进行反转</p>
<p>  eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">4</span>]</span><br><span class="line">b.reverse()  <span class="comment"># 对b进行反转</span></span><br><span class="line">print(b)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[4, 9, 6, 5, 1, 2]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>pop: 删除元素，默认删除最后一个元素</p>
<p>  eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">4</span>]</span><br><span class="line">print(<span class="string">'原始的b列表长这样:\n'</span>, b)</span><br><span class="line">b.pop()  <span class="comment"># 删除最后一个元素</span></span><br><span class="line">print(<span class="string">'删除最右边的元素后\n'</span>, b)</span><br><span class="line">b.pop(<span class="number">0</span>)  <span class="comment"># 删除第一元素</span></span><br><span class="line">print(<span class="string">'删除第一个元素后的样子:'</span>)</span><br><span class="line">print(b)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"> <span class="string">"""</span></span><br><span class="line"><span class="string">原始的b列表长这样:</span></span><br><span class="line"><span class="string"> [2, 1, 5, 6, 9, 4]</span></span><br><span class="line"><span class="string">删除最右边的元素后</span></span><br><span class="line"><span class="string">[2, 1, 5, 6, 9]</span></span><br><span class="line"><span class="string">删除第一个元素后的样子:</span></span><br><span class="line"><span class="string">[1, 5, 6, 9]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>remove函数，用于删除特定的元素，pop是删索引，注意两者区别。</p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  b = [<span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">4</span>]</span><br><span class="line">  print(<span class="string">'原始的b列表长这样:\n'</span>, b)</span><br><span class="line">  b.remove(<span class="number">5</span>)  <span class="comment"># 删除元素5</span></span><br><span class="line">  print(<span class="string">'第一次删除后\n'</span>, b)</span><br><span class="line">  b.remove(<span class="number">6</span>)  <span class="comment"># 删除元素6</span></span><br><span class="line">  print(<span class="string">'第二次删除后:'</span>)</span><br><span class="line">  print(b)</span><br><span class="line">  <span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">  原始的b列表长这样:</span></span><br><span class="line"><span class="string"> [2, 1, 5, 6, 9, 4]</span></span><br><span class="line"><span class="string">  第一次删除后</span></span><br><span class="line"><span class="string"> [2, 1, 6, 9, 4]</span></span><br><span class="line"><span class="string">   第二次删除后:</span></span><br><span class="line"><span class="string">   [2, 1, 9, 4]</span></span><br><span class="line"><span class="string">  """</span></span><br></pre></td></tr></table></figure>


</li>
</ul>
<h3 id="方法和函数的区别"><a href="#方法和函数的区别" class="headerlink" title="方法和函数的区别"></a>方法和函数的区别</h3><ul>
<li><p>方法是一种特殊的函数</p>
</li>
<li><p>方法属于某一个对象(数字、列表、字符串都可以看成对象，后面会仔细讲)，而函数可以单独存在</p>
<p>eg:如列表的pop方法只有列表才可以用，而max函数可以直接使用</p>
</li>
<li><p>方法使用：obeject.funciton()，函数的使用：funciton()</p>
</li>
<li><p>方法包含的参数中,一定有一个参数是对象本身</p>
<p>eg:如sort方法实际就是对它自身进行排序,可以看成是list.sort(self)，self代表它本身.</p>
</li>
</ul>
]]></content>
      <categories>
        <category>python复习</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>python复习100天--第3天</title>
    <url>/2020/02/23/python%E5%A4%8D%E4%B9%A0100%E5%A4%A9--%E7%AC%AC3%E5%A4%A9/</url>
    <content><![CDATA[<h2 id="Python基本数据类型"><a href="#Python基本数据类型" class="headerlink" title="Python基本数据类型"></a>Python基本数据类型</h2><h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><ul>
<li><p>字典是一种映射类型，字典用 <strong>{ }</strong> 标识，它是一个无序的 <strong>键(key) : 值(value)</strong> 的集合。</p>
</li>
<li><p>在同一个字典中，键(key)必须是唯一的。</p>
</li>
<li><p>字典中键所对应的值是可变的</p>
</li>
<li><p>字典的创建方法：</p>
<ul>
<li>法1：直接用中括号，冒号左边为键，冒号右边为值，多个键和值则用逗号隔开</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">'key1'</span>: <span class="string">'你好'</span>, <span class="string">'key2'</span>: <span class="string">'我好'</span>, <span class="string">'key3'</span>: <span class="string">'大家好'</span>&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>法2：通过dict函数创建字典，把key当成参数传入函数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = dict(key1=<span class="string">'你好'</span>, key2=<span class="string">'我好'</span>, key3=<span class="string">'大家好'</span>)   <span class="comment"># 效果和上面是一样的</span></span><br></pre></td></tr></table></figure>

<ul>
<li>法3：创建空字典，然后通过赋值的方式更新字典里面的键和值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = dict()  <span class="comment"># 创建空字典，等同于c = &#123;&#125;</span></span><br><span class="line">c[<span class="string">'key1'</span>] = <span class="string">'你好'</span></span><br><span class="line">c[<span class="string">'key2'</span>] = <span class="string">'我好'</span></span><br><span class="line">c[<span class="string">'key3'</span>] = <span class="string">'大家好'</span></span><br></pre></td></tr></table></figure>

<ul>
<li>法4：利用二维序列创建字典。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [[<span class="string">'key1'</span>, <span class="string">'你好'</span>], [<span class="string">'key2'</span>, <span class="string">'我好'</span>], [<span class="string">'key3'</span>, <span class="string">'大家好'</span>]]</span><br><span class="line">dict1 = dict(list1)</span><br><span class="line">print(dict1)</span><br></pre></td></tr></table></figure>
</li>
<li><p>字典的查看方法：</p>
<ul>
<li>直接通过访问键的方法查看值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">'key1'</span>: <span class="string">'你好'</span>, <span class="string">'key2'</span>: <span class="string">'我好'</span>, <span class="string">'key3'</span>: <span class="string">'大家好'</span>&#125;</span><br><span class="line">print(a[<span class="string">'key2'</span>])</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">我好</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li>通过for循环遍历的方法查看（不会循环的可暂时跳过）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">'key1'</span>: <span class="string">'你好'</span>, <span class="string">'key2'</span>: <span class="string">'我好'</span>, <span class="string">'key3'</span>: <span class="string">'大家好'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i, j <span class="keyword">in</span> a.items():</span><br><span class="line">    print(i, <span class="string">'\t'</span>, j)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">key1 	 你好</span></span><br><span class="line"><span class="string">key2 	 我好</span></span><br><span class="line"><span class="string">key3 	 大家好</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<p>items方法会把字典重新拆分成二维序列的形式。通过for循环可以抽出单个序列，其中序列左边为key，右边为value，所以可以通过此方法遍历字典中所有键和值。</p>
</li>
<li><p>字典元素的增加：</p>
<ul>
<li>直接通过增加新键的方法增加新字典。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">'key1'</span>: <span class="string">'你好'</span>, <span class="string">'key2'</span>: <span class="string">'我好'</span>, <span class="string">'key3'</span>: <span class="string">'大家好'</span>&#125;</span><br><span class="line">a[<span class="string">'key4'</span>] = <span class="string">'才是真的好'</span></span><br><span class="line">print(a)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">&#123;'key1': '你好', 'key2': '我好', 'key3': '大家好', 'key4': '才是真的好'&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>字典元素的更新：</p>
<ul>
<li>直接通过访问键的方法，然后重新赋值即可更新值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">'key1'</span>: <span class="string">'你好'</span>, <span class="string">'key2'</span>: <span class="string">'我好'</span>, <span class="string">'key3'</span>: <span class="string">'大家好'</span>&#125;</span><br><span class="line">a[<span class="string">'key3'</span>] = <span class="string">'楼上说的对'</span></span><br><span class="line">print(a)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">&#123;'key1': '你好', 'key2': '我好', 'key3': '楼上说的对'&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>字典元素的清空：</p>
<ul>
<li>通过clear方法，可以把字典给清空</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">'key1'</span>: <span class="string">'你好'</span>, <span class="string">'key2'</span>: <span class="string">'我好'</span>, <span class="string">'key3'</span>: <span class="string">'大家好'</span>&#125;</span><br><span class="line">a.clear()</span><br><span class="line">print(a)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">&#123;&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>字典的常用函数</p>
<ul>
<li>len: 查看字典元素个数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">'key1'</span>: <span class="string">'你好'</span>, <span class="string">'key2'</span>: <span class="string">'我好'</span>, <span class="string">'key3'</span>: <span class="string">'大家好'</span>&#125;</span><br><span class="line">print(len(a))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>字典常用方法：</p>
<ul>
<li>key in dict,验证键是否在字典内，返回布尔值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">'key1'</span>: <span class="string">'你好'</span>, <span class="string">'key2'</span>: <span class="string">'我好'</span>, <span class="string">'key3'</span>: <span class="string">'大家好'</span>&#125;</span><br><span class="line">print(<span class="string">'key1'</span> <span class="keyword">in</span> a)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li>pop：删除字典中给定键所对应的值。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">'key1'</span>: <span class="string">'你好'</span>, <span class="string">'key2'</span>: <span class="string">'我好'</span>, <span class="string">'key3'</span>: <span class="string">'大家好'</span>&#125;</span><br><span class="line">a.pop(<span class="string">'key1'</span>)</span><br><span class="line">print(a)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">&#123;'key2': '我好', 'key3': '大家好'&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li>items：将字典化为二维序列（上面讲过了）</li>
<li>popitems：删除最后一个键值，并且随机返回删除的结果。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="string">'key1'</span>: <span class="string">'你好'</span>, <span class="string">'key2'</span>: <span class="string">'我好'</span>, <span class="string">'key3'</span>: <span class="string">'大家好'</span>&#125;</span><br><span class="line">result = a.popitem()  <span class="comment"># result用来接受返回的结果</span></span><br><span class="line">print(a)</span><br><span class="line">print(result)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">&#123;'key1': '你好', 'key2': '我好'&#125;</span></span><br><span class="line"><span class="string">('key3', '大家好')</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h3><ul>
<li><p>元组和列表类似，用小括号表示，但是元组不可以修改</p>
</li>
<li><p>元组的创建方法</p>
<ul>
<li>方法一：直接利用tuple函数创建元组（类似List函数）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = tuple()  <span class="comment"># 创建空元组</span></span><br><span class="line">b = tuple(<span class="string">'shdifhaih'</span>)  <span class="comment"># 会讲str按字母分割</span></span><br><span class="line">print(a)</span><br><span class="line">print(b)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">()</span></span><br><span class="line"><span class="string">('s', 'h', 'd', 'i', 'f', 'h', 'a', 'i', 'h')</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li>方法二：利用小括号创建元组</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = (<span class="string">'a'</span>, )  <span class="comment"># 注意，如果只有一个元素，逗号不可以省略，不然括号会当成是数字运算符</span></span><br><span class="line">print(a)</span><br><span class="line">print(type(a))</span><br><span class="line">b = (<span class="string">'b'</span>)  <span class="comment"># 错误示范</span></span><br><span class="line">print(type(b))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">('a',)</span></span><br><span class="line"><span class="string">&lt;class 'tuple'&gt;</span></span><br><span class="line"><span class="string">&lt;class 'str'&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>元组的切片</p>
<ul>
<li>基本和列表一样的</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = tuple(range(<span class="number">10</span>))  <span class="comment"># tuple函数可以和List函数一样把列表转tuple</span></span><br><span class="line">print(a)</span><br><span class="line">print(a[<span class="number">0</span>])  <span class="comment"># 取第一个元素</span></span><br><span class="line">print(a[<span class="number">1</span>: <span class="number">4</span>])  <span class="comment"># 取2,3,4元素，不包括a[4]，即不包括第五个元素</span></span><br><span class="line">print(a[<span class="number">1</span>:<span class="number">9</span>:<span class="number">2</span>])  <span class="comment"># 从第二个取到第九个，不包括第10个，每隔两个取一个</span></span><br><span class="line">print(a[<span class="number">-3</span>:<span class="number">-1</span>])  <span class="comment"># 从倒数第三个，取到倒数第一个，不包括倒数第一个</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">(1, 2, 3)</span></span><br><span class="line"><span class="string">(1, 3, 5, 7)</span></span><br><span class="line"><span class="string">(7, 8)</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>元组运算符</p>
<ul>
<li>in：检测元素是否在元组内（注意：字符串（str）和列表（list）也有此方法）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = tuple(range(<span class="number">10</span>))  <span class="comment"># tuple函数可以和List函数一样把列表转tuple</span></span><br><span class="line">print(<span class="number">1</span> <span class="keyword">in</span> a)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>+</code>：元组可以用加号进行拼接，类似list的extend方法。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = tuple(range(<span class="number">10</span>))  <span class="comment"># tuple函数可以和List函数一样把列表转tuple</span></span><br><span class="line">b = tuple(range(<span class="number">11</span>, <span class="number">20</span>))</span><br><span class="line">a = a + b</span><br><span class="line">print(a)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 19)</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>*</code>：元组的复制（注意：字符串（str）和列表（list）也有此方法）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = (<span class="number">20</span>,)</span><br><span class="line">a = a * <span class="number">10</span></span><br><span class="line">print(a)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">(20, 20, 20, 20, 20, 20, 20, 20, 20, 20)</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li>元组的迭代（for循环再讲，List也可以）</li>
</ul>
</li>
<li><p>元组的常用函数：</p>
<ul>
<li>len：计算元组个数，和列表一样的</li>
<li>max：计算元组中最大的那个元素，和列表一样的</li>
<li>min：计算元组中最小的那个元素，和列表一样的</li>
<li>tuple：把其它类型转化为元组，上面元组的建立已经展示过了</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>python复习</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>python复习100天--第4天</title>
    <url>/2020/02/26/python%E5%A4%8D%E4%B9%A0100%E5%A4%A9--%E7%AC%AC4%E5%A4%A9/</url>
    <content><![CDATA[<h2 id="Python基本数据类型"><a href="#Python基本数据类型" class="headerlink" title="Python基本数据类型"></a>Python基本数据类型</h2><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><ul>
<li>集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。</li>
<li>集合的创建方法：大括号或者set函数</li>
<li>集合是无序的，而列表和元组是有序的</li>
<li>集合中的元素不存在重复（所以集合常用来数据去重）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;  <span class="comment"># 注意：集合只有逗号，没得冒号</span></span><br><span class="line">b = set(<span class="string">'abcde'</span>)</span><br><span class="line">print(a, <span class="string">'\n'</span>, b)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">&#123;1, 2, 3&#125; </span></span><br><span class="line"><span class="string">&#123;'a', 'c', 'e', 'd', 'b'&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li>集合的查看方法<ul>
<li>集合中单个元素无法抽出来查看，因为集合是无序的</li>
</ul>
</li>
<li>集合元素的增加<ul>
<li>利用add方法可以增加元素</li>
<li>利用update方法也可以增加元素</li>
<li>add用于增加单个元素，update用于增加多个元素，且update增加元素的格式为列表或者元组或者字典</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;  <span class="comment"># 注意：集合只有逗号，没得冒号</span></span><br><span class="line">a.add(<span class="number">4</span>)</span><br><span class="line">a.update([<span class="number">5</span>])  <span class="comment"># 用update增加单个元素也需要使用列表格式</span></span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">&#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li>集合元素的删除<ul>
<li>使用remove方法移除特定元素（list中也有这个方法）</li>
<li>使用pop方法随机移除一个元素（集合没有序号，所以只能随机移除）</li>
<li>使用discard移除特定元素，如果元素不存在不会报错</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = set(range(<span class="number">10</span>))  <span class="comment"># set把range转集合</span></span><br><span class="line">a.remove(<span class="number">9</span>)</span><br><span class="line">a.pop()  <span class="comment"># 随机删除</span></span><br><span class="line">a.discard(<span class="number">100</span>)  <span class="comment"># 这个元素不存在，不会报错</span></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">&#123;1, 2, 3, 4, 5, 6, 7, 8&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>集合的数学运算符</p>
<ul>
<li><p>Python中的集合和数学中的集合基本使用方法一致</p>
</li>
<li><p><code>-</code>：用于求两个集合的差集（绿色剩余部分表示A-B）</p>
<p><img src="/2020/02/26/python%E5%A4%8D%E4%B9%A0100%E5%A4%A9--%E7%AC%AC4%E5%A4%A9/image-20200226201022792.png" alt="image-20200226201022792"></p>
</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = set(range(<span class="number">10</span>))  <span class="comment"># set把range转集合</span></span><br><span class="line">b = set(range(<span class="number">6</span>, <span class="number">12</span>))</span><br><span class="line">print(a-b)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">&#123;0, 1, 2, 3, 4, 5&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li><ul>
<li><code>|</code>：用于求两个集合的并集（绿色部分为A|B，可以理解为A或者B）</li>
</ul>
</li>
</ul>
<p><img src="/2020/02/26/python%E5%A4%8D%E4%B9%A0100%E5%A4%A9--%E7%AC%AC4%E5%A4%A9/image-20200226201438071.png" alt="image-20200226201438071"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = set(range(<span class="number">10</span>))  <span class="comment"># set把range转集合</span></span><br><span class="line">b = set(range(<span class="number">6</span>, <span class="number">12</span>))</span><br><span class="line">print(a | b)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">&#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li><ul>
<li><code>&amp;</code>：用于求两个集合的交集（阴影黄色部分为A&amp;B）</li>
</ul>
</li>
</ul>
<p><img src="/2020/02/26/python%E5%A4%8D%E4%B9%A0100%E5%A4%A9--%E7%AC%AC4%E5%A4%A9/image-20200226202301707.png" alt="image-20200226202301707"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = set(range(<span class="number">10</span>))  <span class="comment"># set把range转集合</span></span><br><span class="line">b = set(range(<span class="number">6</span>, <span class="number">12</span>))</span><br><span class="line">print(a &amp; b)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">&#123;8, 9, 6, 7&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li><ul>
<li><code>^</code>：用于求两个集合不同时存在的元素（可以翻译为A否B，上面图黄色加红色就是了）</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = set(range(<span class="number">10</span>))  <span class="comment"># set把range转集合</span></span><br><span class="line">b = set(range(<span class="number">6</span>, <span class="number">12</span>))</span><br><span class="line">print(a ^ b)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">&#123;0, 1, 2, 3, 4, 5, 10, 11&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>集合中常用函数</p>
<ul>
<li>len函数：计算集合中元素个数。使用同列表、字典、元组、字符串</li>
<li>in函数：验证元素是否在集合中。使用同列表、字典、元组、字符串</li>
</ul>
</li>
<li><p>集合中常用方法：</p>
<ul>
<li>clear()：移除集合中所有元素，同列表，字典</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = set(range(<span class="number">10</span>))  <span class="comment"># set把range转集合</span></span><br><span class="line">b = set(range(<span class="number">6</span>, <span class="number">12</span>))</span><br><span class="line">a.clear()</span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">set()</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li>copy()：复制集合，同列表</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = set(range(<span class="number">10</span>))  <span class="comment"># set把range转集合</span></span><br><span class="line">b = a.copy()</span><br><span class="line">print(b)</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">&#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li>union：返回两个集合并集，和上面的<code>|</code>一样</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = set(range(<span class="number">10</span>))  <span class="comment"># set把range转集合</span></span><br><span class="line">b = set(range(<span class="number">6</span>, <span class="number">13</span>))</span><br><span class="line">print(a.union(b))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">&#123;0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li>difference：返回两个集合的差集，和上面的<code>-</code>一样</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = set(range(<span class="number">10</span>))  <span class="comment"># set把range转集合</span></span><br><span class="line">b = set(range(<span class="number">6</span>, <span class="number">13</span>))</span><br><span class="line">print(a.difference(b))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">&#123;0, 1, 2, 3, 4, 5&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li>intersection：返回两个集合的交集，和上面的<code>&amp;</code>一样</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = set(range(<span class="number">10</span>))  <span class="comment"># set把range转集合</span></span><br><span class="line">b = set(range(<span class="number">6</span>, <span class="number">13</span>))</span><br><span class="line">print(a.intersection(b))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">&#123;8, 9, 6, 7&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li>symmetric_difference：返回两个不相同的元素，和上面的<code>^</code>一样</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = set(range(<span class="number">10</span>))  <span class="comment"># set把range转集合</span></span><br><span class="line">b = set(range(<span class="number">6</span>, <span class="number">13</span>))</span><br><span class="line">print(a.symmetric_difference(b))</span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">&#123;0, 1, 2, 3, 4, 5, 10, 11, 12&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
]]></content>
      <categories>
        <category>python复习</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>python复习100天--第5天</title>
    <url>/2020/03/01/python%E5%A4%8D%E4%B9%A0100%E5%A4%A9--%E7%AC%AC5%E5%A4%A9/</url>
    <content><![CDATA[<h2 id="条件控制"><a href="#条件控制" class="headerlink" title="条件控制"></a>条件控制</h2><ul>
<li>if–else为最基本的条件控制语句</li>
<li>if 后面接一个布尔表达式，如果是真，执行一段代码，如果不是真，执行另外一段代码</li>
<li>else if一般简写为elif</li>
<li>代码块需要缩进</li>
<li>else不需要接条件，代表上面的都不成立的情况</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = float(input(<span class="string">"请输入你的成绩："</span>))</span><br><span class="line"><span class="keyword">if</span> a &gt;= <span class="number">90</span>:  <span class="comment"># 成绩大于等于90</span></span><br><span class="line">    print(<span class="string">'你的成绩为优秀'</span>)</span><br><span class="line"><span class="keyword">elif</span> a &gt;= <span class="number">80</span>:  <span class="comment"># 成绩小于90，但是大于等于80</span></span><br><span class="line">    print(<span class="string">'你的成绩为良好'</span>)</span><br><span class="line"><span class="keyword">elif</span> a &gt;= <span class="number">60</span>:  <span class="comment"># 成绩小于80，但是大于等于60</span></span><br><span class="line">    print(<span class="string">'你的成绩为及格'</span>)</span><br><span class="line"><span class="keyword">else</span>:  <span class="comment"># 最后一个else不接条件，就是60以下的意思</span></span><br><span class="line">    print(<span class="string">'不及格'</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 输出结果</span></span><br><span class="line"><span class="string">请输入你的成绩：85</span></span><br><span class="line"><span class="string">你的成绩为良好</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="if-嵌套"><a href="#if-嵌套" class="headerlink" title="if 嵌套"></a>if 嵌套</h3><ul>
<li>if可以嵌套，即分支之后再分支</li>
<li>根据缩进位置确认嵌套的if和else对应的结构</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = float(input(<span class="string">"请输入你的成绩："</span>))</span><br><span class="line"><span class="keyword">if</span> a &gt;= <span class="number">60</span>:  <span class="comment"># 如果成绩大于等于60</span></span><br><span class="line">    <span class="keyword">if</span> a &gt;= <span class="number">80</span>:  <span class="comment"># 如果成绩大于等于80</span></span><br><span class="line">        <span class="keyword">if</span> a &gt;= <span class="number">90</span>:  <span class="comment"># 如果成绩大于等于90</span></span><br><span class="line">            print(<span class="string">'你的成绩为优秀'</span>)</span><br><span class="line">        <span class="keyword">else</span>:  <span class="comment"># 如果成绩小于90，但是大于80，对应第三个if</span></span><br><span class="line">            print(<span class="string">'你的成绩为良好'</span>)</span><br><span class="line">    <span class="keyword">else</span>:  <span class="comment"># 如果小于80，但是大于60，对应第二个if</span></span><br><span class="line">        print(<span class="string">'你的成绩为及格'</span>)</span><br><span class="line"><span class="keyword">else</span>:  <span class="comment"># 如果成绩小于60，对应第一个if</span></span><br><span class="line">    print(<span class="string">'不及格'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 输出结果</span></span><br><span class="line"><span class="string">请输入你的成绩：85</span></span><br><span class="line"><span class="string">你的成绩为良好</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><ul>
<li>for xx in xxx</li>
<li>xxx可以为字符串，列表，元组，甚至有时候是字典</li>
<li>xx可以为任意变量名称，如x,i,j等等</li>
<li>需要用冒号和缩进符控制需要循环的语句块</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    print(x)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="string">'abcd'</span>:</span><br><span class="line">    print(i)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 输出结果</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">a</span></span><br><span class="line"><span class="string">b</span></span><br><span class="line"><span class="string">c</span></span><br><span class="line"><span class="string">d</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li>for 循环常和列表放在一起构成列表表达式，列表表达式可以方便快捷的生成新列表</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list2 = []  <span class="comment"># 构建一个空列表，用来储存新列表</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    list2.append(x ** <span class="number">2</span>)</span><br><span class="line">list3 = [x**<span class="number">2</span> <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">5</span>)]  <span class="comment"># 和上面三行代码效果一样</span></span><br><span class="line">print(list2)</span><br><span class="line">print(list3)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 输出结果</span></span><br><span class="line"><span class="string">[0, 1, 4, 9, 16]</span></span><br><span class="line"><span class="string">[0, 1, 4, 9, 16]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li>for循环之间也可以嵌套</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打印9*9乘法口诀</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):  <span class="comment"># 用来控制有多少行</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>, i+<span class="number">1</span>):  <span class="comment"># 用来控制每行有多少个数</span></span><br><span class="line">        print(<span class="string">'&#123;&#125;x&#123;&#125;=&#123;&#125;'</span>.format(i, j, i*j), end=<span class="string">'\t'</span>)  <span class="comment"># 为了显示在一行，这里用水平制表符隔开</span></span><br><span class="line">    print(<span class="string">''</span>)  <span class="comment"># 需要一个回车，因为这一列输出完了</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 输出结果</span></span><br><span class="line"><span class="string">1x1=1	</span></span><br><span class="line"><span class="string">2x1=2	2x2=4	</span></span><br><span class="line"><span class="string">3x1=3	3x2=6	3x3=9	</span></span><br><span class="line"><span class="string">4x1=4	4x2=8	4x3=12	4x4=16	</span></span><br><span class="line"><span class="string">5x1=5	5x2=10	5x3=15	5x4=20	5x5=25	</span></span><br><span class="line"><span class="string">6x1=6	6x2=12	6x3=18	6x4=24	6x5=30	6x6=36	</span></span><br><span class="line"><span class="string">7x1=7	7x2=14	7x3=21	7x4=28	7x5=35	7x6=42	7x7=49	</span></span><br><span class="line"><span class="string">8x1=8	8x2=16	8x3=24	8x4=32	8x5=40	8x6=48	8x7=56	8x8=64	</span></span><br><span class="line"><span class="string">9x1=9	9x2=18	9x3=27	9x4=36	9x5=45	9x6=54	9x7=63	9x8=72	9x9=81	</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li>for循环的打断<ul>
<li>break：直接跳出本次循环，本次循环结束</li>
<li>continue：跳过本次循环，进入下一次循环</li>
<li>pass：用来占一个位置，不具有实际意义，若后面有代码仍然会执行</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 演示打印奇数</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> i % <span class="number">2</span> == <span class="number">0</span>:  <span class="comment"># 如果为偶数，跳过</span></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(i)  <span class="comment"># 否则才打印</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">5</span></span><br><span class="line"><span class="string">7</span></span><br><span class="line"><span class="string">9</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 演示打印前5个数</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">break</span>  <span class="comment"># 如果i等于5，退出本次循环</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(i)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 演示pass占位功能</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 演示pass占位功能</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    print(i)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li>for后面也可以接else，表示循环结束后应该要执行的代码</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 演示pass占位功能</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    print(i)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'循环已经结束'</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果：</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">循环已经结束</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><ul>
<li>翻译为当什么什么时候就执行循环，可以理解为条件循环</li>
<li>while后面接布尔值</li>
<li>while也可以接else</li>
<li>while打断同for，也可以用break, continue</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 计算银行存款利息多少年才能翻倍</span></span><br><span class="line">i = <span class="number">0.05</span>  <span class="comment"># 假设银行利息为5%</span></span><br><span class="line">s = <span class="number">1000</span>  <span class="comment"># 本金为1000</span></span><br><span class="line">n = <span class="number">0</span>  <span class="comment"># n为存款年限</span></span><br><span class="line"><span class="keyword">while</span> s &lt; <span class="number">2000</span>:</span><br><span class="line">    n += <span class="number">1</span>  <span class="comment"># 等同于n=n+1</span></span><br><span class="line">    s = s * (<span class="number">1</span>+i)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'循环结束'</span>)  <span class="comment"># while也可以接else</span></span><br><span class="line">    print(<span class="string">'&#123;&#125;年后你的本息和翻倍'</span>.format(n))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 输出结果：</span></span><br><span class="line"><span class="string">循环结束</span></span><br><span class="line"><span class="string">15年后你的本息和翻倍</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="for和while的区别"><a href="#for和while的区别" class="headerlink" title="for和while的区别"></a>for和while的区别</h3><ul>
<li>for知道要循环多少次，而while不知道</li>
<li>for循环为遍历循环，通常为遍历字符串，列表，元祖、甚至字典</li>
<li>while循环为条件循环，只要条件成立，就可以一直循环下去</li>
</ul>
]]></content>
      <categories>
        <category>python复习</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>python复习100天--第6天</title>
    <url>/2020/03/10/python%E5%A4%8D%E4%B9%A0100%E5%A4%A9--%E7%AC%AC6%E5%A4%A9/</url>
    <content><![CDATA[<h2 id="迭代器与生成器"><a href="#迭代器与生成器" class="headerlink" title="迭代器与生成器"></a>迭代器与生成器</h2><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><ul>
<li>迭代可以理解为大箱子里面有小箱子，无数迭代</li>
<li>iter函数负责把数据转成迭代类型，即把原来的链式结构转成迭代结构（大箱子里面有小箱子）</li>
<li>next函数负责访问下一个元素</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = list(range(<span class="number">3</span>))</span><br><span class="line">iter1 = iter(list1)  <span class="comment"># 列表转迭代</span></span><br><span class="line">print(next(iter1))  <span class="comment"># 访问下一个迭代元素</span></span><br><span class="line">print(next(iter1))  <span class="comment"># 访问下一个迭代元素</span></span><br><span class="line">print(next(iter1))  <span class="comment"># 访问下一个迭代元素</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 输出结果</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li>迭代器可以用for循环进行遍历</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = list(range(<span class="number">3</span>))</span><br><span class="line">iter1 = iter(list1)  <span class="comment"># 列表转迭代</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> iter1:</span><br><span class="line">    print(i)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 输出结果</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h3><ul>
<li><p>生成器是用来收集单个数据的，可以理解为单个箱子</p>
</li>
<li><p>生成器收集完数据后程序继续运行，不会像return那样只能收集单个数据</p>
</li>
<li><p>可以把生成器理解为单个箱子的迭代</p>
</li>
<li><p>常用yield函数做生成器</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    定义一个简单的函数</span></span><br><span class="line"><span class="string">    :return: 不用return，用yield的来收集数据</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">yield</span> i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = fun1()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    print(next(s))</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 输出结果</span></span><br><span class="line"><span class="string">0</span></span><br><span class="line"><span class="string">1</span></span><br><span class="line"><span class="string">2</span></span><br><span class="line"><span class="string">3</span></span><br><span class="line"><span class="string">4</span></span><br><span class="line"><span class="string">5</span></span><br><span class="line"><span class="string">6</span></span><br><span class="line"><span class="string">7</span></span><br><span class="line"><span class="string">8</span></span><br><span class="line"><span class="string">9</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File "/home/tlntin/PycharmProjects/study/第二天.py", line 12, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    print(next(s))</span></span><br><span class="line"><span class="string">StopIteration</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li>这里用的是while死循环遍历，当遇到错误的时候，自动退出。</li>
</ul>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><ul>
<li><p>可用用来实现特定功能的，可以防止出现大量重复代码</p>
</li>
<li><p>方便代码的重复利用，使得代码更加简洁</p>
</li>
<li><p>常用def开头，后面接函数名称和括号。</p>
</li>
<li><p>函数内的代码需要用冒号，然后后面接缩进。</p>
</li>
<li><p>调用函数的时候直接给出函数名加括号即可。</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    我是一个函数</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(<span class="string">'hello world'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fun1()  <span class="comment"># 调用函数</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 输出结果</span></span><br><span class="line"><span class="string">hello world</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a>函数参数</h3><ul>
<li><p>函数的参数一般在定义函数的括号内直接定义</p>
</li>
<li><p>调用函数的时候也需要直接在函数名称后面的时候带上参数</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun1</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    我是一个函数</span></span><br><span class="line"><span class="string">    用来计算长方体面积</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(<span class="string">'长方体面积为：'</span>, a*b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fun1(<span class="number">2</span>, <span class="number">3</span>)  <span class="comment"># 调用函数</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 输出结果</span></span><br><span class="line"><span class="string">长方体面积为： 6</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li>调用函数的时候也可以指定参数的值，如果不指定则按默认顺序传递值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun1</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    我是一个函数</span></span><br><span class="line"><span class="string">    用来计算长方体面积</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(<span class="string">'长为：&#123;&#125;， 宽为：&#123;&#125;，长方体面积为：'</span>.format(a, b), a*b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fun1(b=<span class="number">2</span>, a=<span class="number">3</span>)  <span class="comment"># 调用函数</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 输出结果</span></span><br><span class="line"><span class="string">长为：3， 宽为：2，长方体面积为： 6</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li>默认参数，即可以在定义函数的时候事先给参数带一个默认值，这样在调用的时候可以给参数，也可以不给参数。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(r, pi=<span class="number">3.14</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    计算圆的面积</span></span><br><span class="line"><span class="string">    :param r:圆的半径,float,int类型</span></span><br><span class="line"><span class="string">    :param pi:圆周率，这里给了一个默认参数3.14</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    s = pi * r**<span class="number">2</span></span><br><span class="line">    print(<span class="string">'圆的面积为：'</span>, s)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fun(<span class="number">2</span>)</span><br><span class="line">fun(<span class="number">2</span>, <span class="number">3.1415926</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 输出结果</span></span><br><span class="line"><span class="string">圆的面积为： 12.56</span></span><br><span class="line"><span class="string">圆的面积为： 12.5663704</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li>收集参数，即在定义函数的时候不确定定义多少个参数，可以用收集参数来定义。</li>
<li>收集参数常用<code>*args</code>,<code>**args</code>分别收集元组和字典。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(*args)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    展示收集参数收集元组</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(<span class="string">'你输入的参数有：'</span>, args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fun(<span class="number">1</span>)</span><br><span class="line">fun(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 输出结果</span></span><br><span class="line"><span class="string">你输入的参数有： (1,)</span></span><br><span class="line"><span class="string">你输入的参数有： (1, 2, 3)</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(**args)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    展示收集参数收集元组</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(<span class="string">'你输入的参数有：'</span>, args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fun(a=<span class="number">1</span>, b=<span class="number">2</span>, c=<span class="number">3</span>)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 输出结果</span></span><br><span class="line"><span class="string">你输入的参数有： &#123;'a': 1, 'b': 2, 'c': 3&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="函数返回"><a href="#函数返回" class="headerlink" title="函数返回"></a>函数返回</h3><ul>
<li>常用return来返回函数最终的结果，return之后，函数即停止，后面的内容不再运行。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(r, pi=<span class="number">3.14</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    计算圆的面积</span></span><br><span class="line"><span class="string">    :param r:圆的半径,float,int类型</span></span><br><span class="line"><span class="string">    :param pi:圆周率，这里给了一个默认参数3.14</span></span><br><span class="line"><span class="string">    :return: 返回s,即圆的面积</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    s = pi * r**<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line">    print(<span class="string">'我是return后面的内容'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = fun(<span class="number">2</span>)</span><br><span class="line">s2 = fun(<span class="number">2</span>, <span class="number">3.1415926</span>)</span><br><span class="line">print(s, s2)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 输出结果</span></span><br><span class="line"><span class="string">12.56 12.5663704</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如果不写return，则函数默认返回None值</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(r, pi=<span class="number">3.14</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    计算圆的面积</span></span><br><span class="line"><span class="string">    :param r:圆的半径,float,int类型</span></span><br><span class="line"><span class="string">    :param pi:圆周率，这里给了一个默认参数3.14</span></span><br><span class="line"><span class="string">    :return: 返回s,即圆的面积</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    s = pi * r**<span class="number">2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = fun(<span class="number">2</span>)</span><br><span class="line">s2 = fun(<span class="number">2</span>, <span class="number">3.1415926</span>)</span><br><span class="line">print(s, s2)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 输出结果</span></span><br><span class="line"><span class="string">None None</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li>也可以用yield进行返回，yield返回对象是一个生成器。即大箱子套小箱子。</li>
<li>yield后面的代码可以继续运行</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">(r, pi=<span class="number">3.14</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    计算圆的面积</span></span><br><span class="line"><span class="string">    :param r:圆的半径,float,int类型</span></span><br><span class="line"><span class="string">    :param pi:圆周率，这里给了一个默认参数3.14</span></span><br><span class="line"><span class="string">    :return: 返回s,即圆的面积</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    s0 = pi * r**<span class="number">2</span></span><br><span class="line">    <span class="keyword">yield</span> s0</span><br><span class="line">    print(<span class="string">'我是yield后面的内容'</span>)</span><br><span class="line">    s1 = s0 + <span class="number">1</span></span><br><span class="line">    <span class="keyword">yield</span> s1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s_list = fun(<span class="number">4</span>)</span><br><span class="line">print(next(s_list))</span><br><span class="line">print(next(s_list))</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 输出结果</span></span><br><span class="line"><span class="string">50.24</span></span><br><span class="line"><span class="string">我是yield后面的内容</span></span><br><span class="line"><span class="string">51.24</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><ul>
<li>python常用lambda函数创建匿名函数，即不需要用def定义函数名称而可以直接使用</li>
<li>lambda函数可以直接定义完后立即调用</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fun1 = <span class="keyword">lambda</span> x, y: x+y  <span class="comment"># 定义一个lambda匿名函数，传给变量fun1暂时储存</span></span><br><span class="line">s_list = fun1(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun2</span><span class="params">(x, y)</span>:</span>  <span class="comment"># 这个和上面的lambda一样</span></span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s_list2 = fun2(<span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">print(s_list, s_list2)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">3 4</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li>lambda函数常用map函数混合使用。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = list(range(<span class="number">1</span>, <span class="number">10</span>))</span><br><span class="line">list2 = list(map(<span class="keyword">lambda</span> x: x**<span class="number">2</span>, list1))  <span class="comment"># 计算Lst1的元素的平方后的结果，返回一个map对象，转成List列表</span></span><br><span class="line">print(list2)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[1, 4, 9, 16, 25, 36, 49, 64, 81]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python复习</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>python复习100天--第7天</title>
    <url>/2020/03/13/python%E5%A4%8D%E4%B9%A0100%E5%A4%A9--%E7%AC%AC7%E5%A4%A9/</url>
    <content><![CDATA[<h2 id="模块和包"><a href="#模块和包" class="headerlink" title="模块和包"></a>模块和包</h2><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><ul>
<li>模块是一个包含所有的你定义的或者别人定义的函数和变量的文件，后缀为<code>.py</code></li>
<li>模块一般使用import导入模块名，即导入文件名，然后使用模块名加函数或者变量调用</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一步，自己动手写一个模块</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    随便写一个函数，用来打印"hello world"</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(<span class="string">'hello world'</span>)</span><br><span class="line"><span class="comment"># 写完后重命名为test.py文件</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 调用模块</span></span><br><span class="line"><span class="keyword">import</span> test</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test.fun1()  <span class="comment"># 调用模块的函数</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 输出结果</span></span><br><span class="line"><span class="string">hello world</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li>模块也可以使用from ..模块.. import ..函数或者类..调用，这样可以直接使用函数或者类或者变量</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> test <span class="keyword">import</span> fun1</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fun1()</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 输出结果</span></span><br><span class="line"><span class="string">hello world</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li>如果不确定模块内有什么函数或者类，可以用<code>*</code>号代替，这样就会导入模块中所有函数和类或者变量了</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> test <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fun1()</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 输出结果</span></span><br><span class="line"><span class="string">hello world</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li>导入函数或者类后，可以用as对其重命名，这样可以少写一些字。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> test <span class="keyword">import</span> fun1 <span class="keyword">as</span> f1</span><br><span class="line"><span class="keyword">import</span> test <span class="keyword">as</span> t</span><br><span class="line"></span><br><span class="line">f1()</span><br><span class="line">t.fun1()</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 输出结果</span></span><br><span class="line"><span class="string">hello world</span></span><br><span class="line"><span class="string">hello world</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="name属性"><a href="#name属性" class="headerlink" title="name属性"></a>name属性</h3><ul>
<li>为了让特定的代码在模块中私有化，即模块B导入模块A的时候，模块A有部分代码模块B运行不了，只有模块A可以运行</li>
<li>name属性可以用来做模块测试</li>
<li>使用方法：<code>if __name__ = &#39;__main__&#39;:</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一步，自己动手写一个模块</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun1</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    随便写一个函数，用来打印"hello world"</span></span><br><span class="line"><span class="string">    :return: None</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    print(<span class="string">'hello world'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fun2</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="string">'这个函数只能test模块使用'</span>)</span><br><span class="line">    fun1()</span><br><span class="line">    fun2()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 写完后重命名为test.py文件</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 运行test模块后的结果</span></span><br><span class="line"><span class="string">hello world</span></span><br><span class="line"><span class="string">这个函数只能test模块使用</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> test <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">fun1()</span><br><span class="line">fun2()</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">hello world</span></span><br><span class="line"><span class="string">Traceback (most recent call last):</span></span><br><span class="line"><span class="string">  File "/home/tlntin/PycharmProjects/study/002.py", line 4, in &lt;module&gt;</span></span><br><span class="line"><span class="string">    fun2()</span></span><br><span class="line"><span class="string">NameError: name 'fun2' is not defined</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 在其它模块导入test模块后，运行fun2函数失败，提示该函数未定义</span></span><br><span class="line"><span class="comment"># main函数下的代码只能在该模块运行，不能被导入运行</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>dir</code>函数可以显示出模块中所有函数</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> test</span><br><span class="line">print(dir(test))</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">['__builtins__', '__cached__', '__doc__', '__file__', '__loader__', '__name__', '__package__', '__spec__', 'fun1']</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="标准模块"><a href="#标准模块" class="headerlink" title="标准模块"></a>标准模块</h3><ul>
<li>Python自带的模块，不需要使用第三方<code>pip</code>或者<code>conda</code>安装即可使用</li>
<li>常见的比如<code>sys</code>、<code>os</code>、<code>math</code></li>
</ul>
<h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><ul>
<li>可以理解为模块的集合</li>
<li>把模块理解为<code>py</code>文件，那么包就是文件夹</li>
<li>导入包的方法和导入模块的方法一样</li>
<li>常用方法： from ..<code>包.模块</code>.. import ..类或者函数..</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> exists</span><br><span class="line"></span><br><span class="line">print(exists(<span class="string">'test.py'</span>))  <span class="comment"># 验证文件路径是否存在</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 输出结果</span></span><br><span class="line"><span class="string">True</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python复习</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>python复习100天--第8天</title>
    <url>/2020/03/15/python%E5%A4%8D%E4%B9%A0100%E5%A4%A9--%E7%AC%AC8%E5%A4%A9/</url>
    <content><![CDATA[<h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h2><h3 id="简单读写"><a href="#简单读写" class="headerlink" title="简单读写"></a>简单读写</h3><ul>
<li>python常使用open函数对文件进行读写，返回一个文件操作对象</li>
<li>open函数用于打开文件，write方法写入文件对象，close关闭文件对象。</li>
<li>使用方法1</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 写一个空白文件并且保存</span></span><br><span class="line">f = open(<span class="string">'001.txt'</span>, <span class="string">'wt'</span>)</span><br><span class="line">f.write(<span class="string">'hehe'</span>)  <span class="comment"># 写入内容</span></span><br><span class="line">f.close()  <span class="comment"># 关闭文件</span></span><br><span class="line"><span class="comment"># 写完后，你的路径下会多一个001.txt文件</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>通常来说，用Python打开文件后需要关闭该文件，否则容易引起内存泄露</p>
</li>
<li><p>为了防止忘记关文件，Python可以使用with open() as xx的方法读写文件。</p>
</li>
<li><p>使用方法2</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 写一个空白文件并且保存</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'002.txt'</span>, <span class="string">'wt'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">'hehe'</span>)  <span class="comment"># 写入内容</span></span><br><span class="line">    f.close()  <span class="comment"># 关闭文件</span></span><br><span class="line">    <span class="comment"># 写完后，你的路径下会多一个002.txt文件</span></span><br></pre></td></tr></table></figure>

<h3 id="常用读写模式"><a href="#常用读写模式" class="headerlink" title="常用读写模式"></a>常用读写模式</h3><ul>
<li><p>open函数中共有两个关键参数，还有一个可选参数：编码方式（文本模式下默认utf-8）</p>
</li>
<li><p>关键参数分别为读写的文件名和读写模式</p>
</li>
<li><p>读写模式由两部分构成，一：读取方式；二：读取类型</p>
</li>
</ul>
<table>
<thead>
<tr>
<th align="center">读写方式</th>
<th align="center">英文全称</th>
<th align="center">使用结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">w</td>
<td align="center">write</td>
<td align="center">覆盖写入，即不考虑原来文件是否存在，也不考虑文件是否存在内容，均对其覆盖重建文件。</td>
</tr>
<tr>
<td align="center">r</td>
<td align="center">read</td>
<td align="center">读取文件，读取的文件必须存在，如果不存在会保存。</td>
</tr>
<tr>
<td align="center">a</td>
<td align="center">append</td>
<td align="center">追加写入，即在末尾添加新内容。如果不存在该文件，则自动创建新文件。</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th align="center">读取类型</th>
<th align="center">英文全称</th>
<th align="center">使用结果</th>
</tr>
</thead>
<tbody><tr>
<td align="center">t</td>
<td align="center">text</td>
<td align="center">按文本类型对文件进行操作，t可以省略。txt,json,xml,html都可以看成是文本。</td>
</tr>
<tr>
<td align="center">b</td>
<td align="center">binaray</td>
<td align="center">按二进制进行操作。一般来说，像图片，音乐，视频都是用二进制进行操作。</td>
</tr>
</tbody></table>
<ul>
<li><code>+</code>号可以用来对文件进行读写，如果是<code>w+</code>、<code>r+</code>则为头写入，即覆盖写入，<code>a+</code>则为末尾追加写入。</li>
<li>所有模式大全</li>
</ul>
<table>
<thead>
<tr>
<th>模式</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>r</td>
<td>只读文本模式打开，需要文件存在。等同于rt。</td>
</tr>
<tr>
<td>rb</td>
<td>只读二进制模式打开，需要文件存在。</td>
</tr>
<tr>
<td>r+</td>
<td>读写文本模式打开，如果是写入则会覆盖源文件。</td>
</tr>
<tr>
<td>rb+</td>
<td>读写二进制模式打开，如果是写入则会覆盖。</td>
</tr>
<tr>
<td>w</td>
<td>写入文本模式打开，如果不存在则创建新文件。如果存在则覆盖源文件内容。</td>
</tr>
<tr>
<td>w+</td>
<td>读写文本模式打开，比w多了一个读取功能。</td>
</tr>
<tr>
<td>wb</td>
<td>写入二进制文件。</td>
</tr>
<tr>
<td>wb+</td>
<td>读写二进制文件</td>
</tr>
<tr>
<td>a</td>
<td>追加写入文本模式</td>
</tr>
<tr>
<td>ab</td>
<td>追加写入二进制模式</td>
</tr>
<tr>
<td>a+</td>
<td>追加写入+读取文本模式</td>
</tr>
<tr>
<td>ab+</td>
<td>追加写入+读取二进制模式</td>
</tr>
</tbody></table>
<ul>
<li><p>读写文本模式对比（二进制模式同上）</p>
<table>
<thead>
<tr>
<th align="center">功能</th>
<th align="center">r</th>
<th align="center">r+</th>
<th align="center">w</th>
<th align="center">w+</th>
<th align="center">a</th>
<th align="center">a+</th>
</tr>
</thead>
<tbody><tr>
<td align="center">读</td>
<td align="center">*</td>
<td align="center">*</td>
<td align="center"></td>
<td align="center">*</td>
<td align="center"></td>
<td align="center">*</td>
</tr>
<tr>
<td align="center">写</td>
<td align="center"></td>
<td align="center">*</td>
<td align="center"></td>
<td align="center">*</td>
<td align="center"></td>
<td align="center">*</td>
</tr>
<tr>
<td align="center">创建</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">*</td>
<td align="center">*</td>
<td align="center">*</td>
<td align="center">*</td>
</tr>
<tr>
<td align="center">覆盖</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">*</td>
<td align="center">*</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">从开始读写</td>
<td align="center">*</td>
<td align="center">*</td>
<td align="center">*</td>
<td align="center">*</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">从结尾读写</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center">*</td>
<td align="center">*</td>
</tr>
</tbody></table>
</li>
<li><p>总结就是：</p>
<ul>
<li><code>+</code>可以读取写入</li>
<li>r只能读，w只能覆盖写，a是追加写。</li>
<li>r+不能打开不存在的文件，w+和a+可以。</li>
<li>r+和w+都是从头开始读取写入，a+是从上次结尾处读取写入。</li>
</ul>
</li>
</ul>
<h3 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h3><ul>
<li>文件读取必须保证文件已经打开，常使用read方法进行读取。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自己创建一个“静夜思.txt”，将诗的内容复制进去</span></span><br><span class="line"><span class="comment"># 打开静夜思.txt，读取该文件</span></span><br><span class="line">f = open(<span class="string">'静夜思.txt'</span>, <span class="string">'rt'</span>)</span><br><span class="line">str1 = f.read()  <span class="comment"># 可以在括号里面输入数字，表示读取多少个字符，</span></span><br><span class="line"><span class="comment"># 不输入默认读取所有字符</span></span><br><span class="line">print(str1)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 输出结果</span></span><br><span class="line"><span class="string">床前明月光，疑是地上霜。</span></span><br><span class="line"><span class="string">举头望明月，低头思故乡。</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li>也可以使用readline函数读取单行</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自己创建一个“静夜思.txt”，将诗的内容复制进去</span></span><br><span class="line"><span class="comment"># 打开静夜思.txt，读取该文件</span></span><br><span class="line">f = open(<span class="string">'静夜思.txt'</span>, <span class="string">'rt'</span>)</span><br><span class="line">str1 = f.readline()  <span class="comment"># 第一次读取第一行</span></span><br><span class="line">str2 = f.readline()  <span class="comment"># 第二次读取第二行</span></span><br><span class="line">print(str1, str2)</span><br><span class="line">f.close()</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 输出结果</span></span><br><span class="line"><span class="string">床前明月光，疑是地上霜。</span></span><br><span class="line"><span class="string">举头望明月，低头思故乡。</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li>也可以使用readlines一次性读取所有行，读取结果是一个列表。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自己创建一个“静夜思.txt”，将诗的内容复制进去</span></span><br><span class="line"><span class="comment"># 打开静夜思.txt，读取该文件</span></span><br><span class="line">f = open(<span class="string">'静夜思.txt'</span>, <span class="string">'rt'</span>)</span><br><span class="line">list1 = f.readlines()</span><br><span class="line">print(list1)</span><br><span class="line">f.close()</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 输出结果</span></span><br><span class="line"><span class="string">['床前明月光，疑是地上霜。\n', '举头望明月，低头思故乡。']</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li>tell方法获取读取的指针所在位置。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自己创建一个“静夜思.txt”，将诗的内容复制进去</span></span><br><span class="line"><span class="comment"># 打开静夜思.txt，读取该文件</span></span><br><span class="line">f = open(<span class="string">'静夜思.txt'</span>, <span class="string">'rt'</span>)</span><br><span class="line">print(<span class="string">'文件操作前指针位置'</span>, f.tell(), <span class="string">'\n'</span>)</span><br><span class="line">str1 = f.readline()</span><br><span class="line">print(<span class="string">'读取一行后的指针位置'</span>, f.tell(), <span class="string">'\n'</span>)</span><br><span class="line">str2 = f.readline()</span><br><span class="line">print(<span class="string">'读取所有内容后的指针位置'</span>, f.tell(), <span class="string">'\n'</span>)</span><br><span class="line">print(str1, str2)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 输出结果</span></span><br><span class="line"><span class="string">文件操作前指针位置 0 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">读取一行后的指针位置 37 </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">读取所有内容后的指针位置 73 </span></span><br><span class="line"><span class="string">xulieh</span></span><br><span class="line"><span class="string">床前明月光，疑是地上霜。</span></span><br><span class="line"><span class="string">举头望明月，低头思故乡。</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>seek方法可以让读取写入的指针进行跳转。</p>
</li>
<li><p>使用方法：f.seek(x, mode)</p>
</li>
<li><p>mode共有三种，0：代表从起始位置开始算，1：代表从当前位置往后移动，2代表从结尾的位置往前移动，表示导入第x个位置。</p>
</li>
<li><p>x代表移动距离，如果mode=2,那么x必须为负数，代表倒数第几个字符。</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自己创建一个“静夜思.txt”，将诗的内容复制进去</span></span><br><span class="line"><span class="comment"># 打开静夜思.txt，读取该文件</span></span><br><span class="line">f = open(<span class="string">'静夜思.txt'</span>, <span class="string">'rb'</span>)  <span class="comment"># 以二进制格式打开,防止可能出现的中文报错</span></span><br><span class="line">print(<span class="string">'当前指针位置'</span>, f.tell())</span><br><span class="line">f.seek(<span class="number">6</span>, <span class="number">0</span>)  <span class="comment"># 从头开始计算，把指针移动到第4个字符上</span></span><br><span class="line">str1 = f.read(<span class="number">1</span>)</span><br><span class="line">print(<span class="string">'当前指针位置'</span>, f.tell())</span><br><span class="line">print(str1)  <span class="comment"># 打印当前指针指向的字符</span></span><br><span class="line">f.seek(<span class="number">4</span>, <span class="number">1</span>)  <span class="comment"># 从当前位置往后移动2个</span></span><br><span class="line">str2 = f.read(<span class="number">1</span>)</span><br><span class="line">print(<span class="string">'当前指针位置'</span>, f.tell())</span><br><span class="line">print(str2)</span><br><span class="line">f.seek(<span class="number">-2</span>, <span class="number">2</span>)  <span class="comment"># 跳转到倒数第2个字符</span></span><br><span class="line">str3 = f.read(<span class="number">1</span>)</span><br><span class="line">print(<span class="string">'当前指针位置'</span>, f.tell())</span><br><span class="line">print(str3)</span><br><span class="line">f.close()</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 输出结果</span></span><br><span class="line"><span class="string">当前指针位置 0</span></span><br><span class="line"><span class="string">当前指针位置 7</span></span><br><span class="line"><span class="string">b'\xe6'</span></span><br><span class="line"><span class="string">当前指针位置 12</span></span><br><span class="line"><span class="string">b'\x88'</span></span><br><span class="line"><span class="string">当前指针位置 72</span></span><br><span class="line"><span class="string">b'\x80'</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>文件读写常用方法总结</li>
</ul>
<table>
<thead>
<tr>
<th align="left">常用方法</th>
<th align="left">功能描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">open</td>
<td align="left">打开文件，是读写文件的前提</td>
</tr>
<tr>
<td align="left">write</td>
<td align="left">写入内容到文件，需要有写入权限</td>
</tr>
<tr>
<td align="left">read</td>
<td align="left">读取文件内容，默认读取所有内容，返回字符串</td>
</tr>
<tr>
<td align="left">readline</td>
<td align="left">读取单行内容，返回字符串</td>
</tr>
<tr>
<td align="left">readlines</td>
<td align="left">读取所有行内容，返回列表</td>
</tr>
<tr>
<td align="left">tell</td>
<td align="left">给出当前指针位置</td>
</tr>
<tr>
<td align="left">seek</td>
<td align="left">跳转指针位置</td>
</tr>
<tr>
<td align="left">close</td>
<td align="left">关闭文件，防止内存占用</td>
</tr>
</tbody></table>
<h2 id="对象序列化和反序列化"><a href="#对象序列化和反序列化" class="headerlink" title="对象序列化和反序列化"></a>对象序列化和反序列化</h2><h3 id="序列化作用"><a href="#序列化作用" class="headerlink" title="序列化作用"></a>序列化作用</h3><ul>
<li>可以实现对象，比如列表，字典永久储存，而不用转成字符串后储存为文本。</li>
<li>可以让对象边运行边储存，实现持久化运行，减少转化步骤和时间</li>
</ul>
<h3 id="反序列化作用"><a href="#反序列化作用" class="headerlink" title="反序列化作用"></a>反序列化作用</h3><ul>
<li>可以让序列化的内容转化成对象直接使用。</li>
<li>反序列化不需要再转格式，保证了对象的真实可靠性</li>
</ul>
<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ul>
<li>先导入pickle函数</li>
<li>使用dump将对象序列化成二进制文件</li>
<li>使用load将二进制文件反序列化为对象</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">dict1 = &#123;<span class="string">'key1'</span>: <span class="string">'value1'</span>&#125;  <span class="comment"># 定义一个简单字典</span></span><br><span class="line">f = open(<span class="string">'001.pkl'</span>, <span class="string">'wb'</span>)  <span class="comment"># pkl为pickle文件的后缀</span></span><br><span class="line">pickle.dump(dict1, f)  <span class="comment"># 将dict1序列化到001.pk1文件中</span></span><br><span class="line">f.close()</span><br><span class="line"><span class="comment"># 结果会生成一个001.pkl文件</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">f = open(<span class="string">'001.pkl'</span>, <span class="string">'rb'</span>)</span><br><span class="line">dict2 = pickle.load(f)</span><br><span class="line">print(dict2)</span><br><span class="line">print(type(dict2))</span><br><span class="line">f.close()</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">&#123;'key1': 'value1'&#125;</span></span><br><span class="line"><span class="string">&lt;class 'dict'&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li>通过序列化和反序列化，可以让对象的内容和类型均不发生改变，这样就可以让对象运行、对象本地储存同时进行，实现可持续化运行。</li>
<li>dump方法用于本地储存，dumps则不储存，而是直接查看序列化后的二进制内容。</li>
<li>load方法用于本地文件加载，而loads则用于pickle二进制内容转python对象。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">dict1 = &#123;<span class="string">'key1'</span>: <span class="string">'value1'</span>&#125;</span><br><span class="line">b1 = pickle.dumps(dict1)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'001.pkl'</span>, <span class="string">'wb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(b1)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">f = open(<span class="string">'001.pkl'</span>, <span class="string">'rb'</span>)</span><br><span class="line">str1 = f.read()  <span class="comment"># 以二进制方式读取其内容</span></span><br><span class="line">dict1 = pickle.loads(str1)  <span class="comment"># 二进制转对象</span></span><br><span class="line">print(dict1)</span><br><span class="line">print(type(dict1))</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 输出结果</span></span><br><span class="line"><span class="string">&#123;'key1': 'value1'&#125;</span></span><br><span class="line"><span class="string">&lt;class 'dict'&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li>上面两个代码块和之前的代码块一致。</li>
</ul>
<h3 id="json序列化和反序列化"><a href="#json序列化和反序列化" class="headerlink" title="json序列化和反序列化"></a>json序列化和反序列化</h3><ul>
<li>pickle用于对象转二进制文件的序列化，json则用于对象转文本后的序列化</li>
<li>使用json.dump可以将对象转文本文件的序列化</li>
<li>使用json.load可以将文本文件转对象格式的反序列化</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">dict1 = &#123;<span class="string">'key1'</span>: <span class="string">'value1'</span>&#125;</span><br><span class="line">f = open(<span class="string">'001.json'</span>, <span class="string">'wt'</span>)  <span class="comment"># 以文本模式打开</span></span><br><span class="line">json.dump(dict1, f)</span><br><span class="line">f.close()</span><br><span class="line"><span class="comment"># 运行结束后，将会多出一个001.json文件</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">f = open(<span class="string">'001.json'</span>, <span class="string">'rt'</span>)  <span class="comment"># 以文本读取模式打开</span></span><br><span class="line">dict1 = json.load(f)</span><br><span class="line">print(dict1)</span><br><span class="line">print(type(dict1))</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">&#123;'key1': 'value1'&#125;</span></span><br><span class="line"><span class="string">&lt;class 'dict'&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<ul>
<li>同样的json.dumps用于将对象转成文本内容（序列）</li>
<li>json.loads用于将文本内容转成对象（反序列）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">dict1 = &#123;<span class="string">'key1'</span>: <span class="string">'value1'</span>&#125;</span><br><span class="line">str1 = json.dumps(dict1)</span><br><span class="line">f = open(<span class="string">'001.json'</span>, <span class="string">'wt'</span>)  <span class="comment"># 以文本模式打开</span></span><br><span class="line">f.write(str1)</span><br><span class="line">f.close()</span><br><span class="line"><span class="comment"># 运行结束后，将会多出一个001.json文件</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">f = open(<span class="string">'001.json'</span>, <span class="string">'rt'</span>)  <span class="comment"># 以文本模式打开</span></span><br><span class="line">str1 = f.read()</span><br><span class="line">dict1 = json.loads(str1)</span><br><span class="line">print(dict1)</span><br><span class="line">print(type(dict1))</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出结果</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">&#123;'key1': 'value1'&#125;</span></span><br><span class="line"><span class="string">&lt;class 'dict'&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python复习</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>基础</tag>
      </tags>
  </entry>
  <entry>
    <title>从无到有免费撸一个博客</title>
    <url>/2040/02/18/%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E5%85%8D%E8%B4%B9%E6%92%B8%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol>
<li>首先，你需要有一个github账号。注册地址：<a href="https://github.com/，任意邮箱注册即可。" target="_blank" rel="noopener">https://github.com/，任意邮箱注册即可。</a></li>
<li>点击右上角的加号，选择New repository，新建一个仓库。</li>
</ol>
<p><img src="/2040/02/18/%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E5%85%8D%E8%B4%B9%E6%92%B8%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/image-20200218171254490.png" alt="image-20200218171254490"></p>
<ol start="3">
<li><p>在Repository name输入仓库名字。注意：这里的仓库名应该为：你的名字（英文小写）.github.io。</p>
<p>比如我填的就是<code>tlntin.giruguothub.io</code>,然后点击下面蓝色的Cereate reponsitory即可。</p>
</li>
</ol>
<p><img src="/2040/02/18/%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E5%85%8D%E8%B4%B9%E6%92%B8%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/image-20200218173001846.png" alt="image-20200218173001846"></p>
<ol start="4">
<li><p>进入设置界面，选择一个初始页面主题。</p>
<p><img src="/2040/02/18/%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E5%85%8D%E8%B4%B9%E6%92%B8%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/image-20200218173105534.png" alt="image-20200218173105534"></p>
</li>
<li><p>一直往下拉，找到Github Page，下面有一个Choose a theme，选择一个初始主题。</p>
<p><img src="/2040/02/18/%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E5%85%8D%E8%B4%B9%E6%92%B8%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/image-20200218173349572.png" alt="image-20200218173349572"></p>
</li>
<li><p>这里选择默认主题就好了。</p>
</li>
</ol>
<p><img src="/2040/02/18/%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E5%85%8D%E8%B4%B9%E6%92%B8%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/image-20200218173433436.png" alt="image-20200218173433436"></p>
<ol start="7">
<li><p>返回仓库，此时仓库已经初始化，自动添加了刚刚的那个主题网页。</p>
<p><img src="/2040/02/18/%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E5%85%8D%E8%B4%B9%E6%92%B8%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/image-20200218173609468.png" alt="image-20200218173609468"></p>
</li>
<li><p>在浏览器输入你刚刚新建的仓库地址，就可以访问你的网站了。</p>
<p>比如我的网站地址是:<a href="https://tlntin.github.io" target="_blank" rel="noopener">https://tlntin.github.io</a></p>
<p><img src="/2040/02/18/%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E5%85%8D%E8%B4%B9%E6%92%B8%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/image-20200218173756344.png" alt="image-20200218173756344"></p>
</li>
<li><p>这样，你就有了自己的一个网站了。如果想要搭一个好看的博客，你还需要做更多，我们下期再讲。</p>
</li>
</ol>
<h2 id="连接Github"><a href="#连接Github" class="headerlink" title="连接Ｇithub"></a>连接Ｇithub</h2><ol>
<li>首先，我们需要生成一个ssh密匙, 以linux为例：</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>生成的ssh密匙在根目录，.ssh文件夹下面，打开并且复制里面的内容。</p>
<p><img src="/2040/02/18/%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E5%85%8D%E8%B4%B9%E6%92%B8%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/image-20200218175522100.png" alt="image-20200218175522100"></p>
</li>
<li><p>打开github，点击头像下面的小三角，点击settings。</p>
</li>
</ol>
<p><img src="/2040/02/18/%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E5%85%8D%E8%B4%B9%E6%92%B8%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/image-20200218175719961.png" alt="image-20200218175719961"></p>
<ol start="4">
<li><p>点击SSH and GPG keys,然后点击Ｎew SSH key，把你刚刚复制的内容粘贴进去，名字随便取。</p>
<p><img src="/2040/02/18/%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E5%85%8D%E8%B4%B9%E6%92%B8%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/image-20200218180019640.png" alt="image-20200218180019640"></p>
</li>
<li><p>终端输入下面的命令，测试是否成功。</p>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>

<p><img src="/2040/02/18/%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E5%85%8D%E8%B4%B9%E6%92%B8%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/image-20200218180303267.png" alt="image-20200218180303267"></p>
<h2 id="安装基本工具"><a href="#安装基本工具" class="headerlink" title="安装基本工具"></a>安装基本工具</h2><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure>

<h3 id="安装nodejs和npm"><a href="#安装nodejs和npm" class="headerlink" title="安装nodejs和npm"></a>安装nodejs和npm</h3><ol>
<li>去nodejs官网（地址：<a href="https://nodejs.org/zh-cn/download/）下载Linux安装包，然后解压" target="_blank" rel="noopener">https://nodejs.org/zh-cn/download/）下载Linux安装包，然后解压</a></li>
</ol>
<p><img src="/2040/02/18/%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E5%85%8D%E8%B4%B9%E6%92%B8%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/image-20200218180527046.png" alt="image-20200218180527046"></p>
<ol start="2">
<li>将node-v12xx重命名为node,然后复制到系统盘，我是放在/usr/share/目录下</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo cp node &#x2F;usr&#x2F;share&#x2F;node</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>将node文件夹，bin目录下的node和npm设置到/usr/bin环境</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ln -s /usr/share/node/npm  /usr/bin/npm</span><br><span class="line">sudo ln -s /usr/share/node/node  /usr/bin/node</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>输入node和npm测试是否安装成功。</li>
</ol>
<p><img src="/2040/02/18/%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E5%85%8D%E8%B4%B9%E6%92%B8%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/image-20200218181240549.png" alt="image-20200218181240549"></p>
<p>如果npm安装不成功。可以用<code>sudo apt-get install npm</code></p>
<ol start="5">
<li><p>npm在国内访问比较慢，可以换国内的淘宝源或者安装cnpm，我这里示范cnpm。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install cnpm -g --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装完成后，就可以使用cnpm代替npm了。</p>
</li>
</ol>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<h2 id="使用hexo生成博客。"><a href="#使用hexo生成博客。" class="headerlink" title="使用hexo生成博客。"></a>使用hexo生成博客。</h2><ol>
<li>找到一个空白文件夹用于初始化项目，我是新建的一个hexo文件夹，然后在此文件夹打开终端。输入下面的命名初始化项目。</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init</span><br><span class="line">cnpm install</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>初始化成功的文件夹如下：</li>
</ol>
<p><img src="/2040/02/18/%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E5%85%8D%E8%B4%B9%E6%92%B8%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/image-20200218182111166.png" alt="image-20200218182111166"></p>
<p>   其中node_modeules为安装的模块文件，public为将要发布的静态网站。</p>
<p>source存放的是markdown文件，用于转换静态网页。themes为主题。_config.yml为站点配置文件。</p>
<ol start="3">
<li><p>先初始化一个网站，命令如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo g #用于讲markdown文件转静态网站</span><br><span class="line">hexo s # 开启本地web服务，可以用来预览网页。</span><br></pre></td></tr></table></figure>

<p>然后在本地输入<code>127.0.0.1:4000</code>，查看网页效果。</p>
<p>自带网页为一个helloword的md。</p>
</li>
</ol>
<h2 id="更换并配置主题"><a href="#更换并配置主题" class="headerlink" title="更换并配置主题"></a>更换并配置主题</h2><ol>
<li>下载主题，下载地址：<a href="https://link.jianshu.com/?t=https%3A%2F%2Fgithub.com%2Fhexojs%2Fhexo%2Fwiki%2FThemes" target="_blank" rel="noopener">ttps://github.com/hexojs/hexo/wiki/Themes</a></li>
</ol>
<p>本人推荐用Next,比较简洁：<a href="https://link.jianshu.com/?t=https%3A%2F%2Fgithub.com%2Fiissnan%2Fhexo-theme-next" target="_blank" rel="noopener">https://github.com/iissnan/hexo-theme-next</a></p>
<ol start="2">
<li><p>将主题丢到hexo的theme目录。修改站点配置文件_config.yml，</p>
<p>找到theme,后面改成next</p>
<p><img src="/2040/02/18/%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E5%85%8D%E8%B4%B9%E6%92%B8%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/image-20200218183744843.png" alt="image-20200218183744843"></p>
</li>
<li><p>点击theme/next目录，修改_config.yml</p>
<ul>
<li><p>修改主题的默认样式，自带的是muse样式，我选择改成Pisces</p>
<p><img src="/2040/02/18/%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E5%85%8D%E8%B4%B9%E6%92%B8%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/image-20200218184026634.png" alt="image-20200218184026634">    </p>
</li>
<li><p>修改主题菜单所对应的路径，需要修改home,tags,categories,archives。</p>
</li>
</ul>
<p><img src="/2040/02/18/%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E5%85%8D%E8%B4%B9%E6%92%B8%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/image-20200218184324592.png" alt="image-20200218184324592"></p>
<ul>
<li>其它修改方法请参考官网说明：<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">http://theme-next.iissnan.com/</a></li>
</ul>
</li>
</ol>
<h2 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h2><ol>
<li>复制你的github上的ssh地址，点击use https,然后复制里面的内容。</li>
</ol>
<p><img src="/2040/02/18/%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E5%85%8D%E8%B4%B9%E6%92%B8%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/image-20200218200735209.png" alt="image-20200218200735209"></p>
<ol start="2">
<li>配置站点部署文件。打开hexo根目录下的_config.yml</li>
</ol>
<p><img src="/2040/02/18/%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E5%85%8D%E8%B4%B9%E6%92%B8%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/image-20200218200931953.png" alt="image-20200218200931953"></p>
<ol start="3">
<li>然后在最下面输入以下信息</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">'git'</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:xx/xx.github.io.git</span>  <span class="comment"># 这里替换成你的ssh地址</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>最后在hexo目录下，终端输入以下命令部署网页到github</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean # 清除缓存</span><br><span class="line">hexo g # 生成静态网页</span><br><span class="line">hexo d # 部署网页到github</span><br></pre></td></tr></table></figure>

<p>5.效果如下：</p>
<p><img src="/2040/02/18/%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E5%85%8D%E8%B4%B9%E6%92%B8%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/image-20200218201622082.png" alt="image-20200218201622082"></p>
<h2 id="补充说明"><a href="#补充说明" class="headerlink" title="补充说明"></a>补充说明</h2><ol>
<li><p>自定义域名</p>
<p>在hexo的source文件夹下，新建一个CNAME文件，然后输入你想要自定义的域名。</p>
<p><img src="/2040/02/18/%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E5%85%8D%E8%B4%B9%E6%92%B8%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/image-20200218203713894.png" alt="image-20200218203713894"></p>
<p>然后在你的域名管理那里新增一个CNAME解析，解析类型CNAME，解析地址就是你的github域名，</p>
</li>
<li><p>图片无法上传到网页</p>
<ul>
<li><p>安装图片解析插件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install https://github.com/7ym0n/hexo-asset-image --save</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装Typora，去偏好设置-图片设置两个参数</p>
</li>
</ul>
</li>
</ol>
<p><img src="/2040/02/18/%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E5%85%8D%E8%B4%B9%E6%92%B8%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/image-20200218205054748.png" alt="image-20200218205054748"></p>
<ul>
<li>选中图片，可以快速移动到文件名的相应位置下。这样就可以快速把你的markdown图片快速复制到本地对应目录了。</li>
<li>最终图片形成的图片路径如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">![这里随便填](你的markdown文件名&#x2F;xx.png)</span><br></pre></td></tr></table></figure>

<p><img src="/2040/02/18/%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E5%85%8D%E8%B4%B9%E6%92%B8%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/image-20200218205404293.png" alt="image-20200218205404293"></p>
<ol start="3">
<li><p>安装右下角的萌萌哒玩偶</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cnpm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure>
</li>
<li><p>常用操作</p>
<ul>
<li>新建文章，文章会在source/_post中存在</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new  *文章标题*  #</span><br></pre></td></tr></table></figure>

<ul>
<li>新建目录页面，目录页会在source/categories/index.md</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new  categories</span><br></pre></td></tr></table></figure>

<p>​    在里面添加以下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">type: "categories"</span><br></pre></td></tr></table></figure>

<p><img src="/2040/02/18/%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E5%85%8D%E8%B4%B9%E6%92%B8%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/image-20200218210804334.png" alt="image-20200218210804334"></p>
<ul>
<li>新建标签页面，标签页会在source/tags/index.md</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo new  tags</span><br></pre></td></tr></table></figure>

<p>在里面添加以下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">type: "tags"</span><br></pre></td></tr></table></figure>

<p><img src="/2040/02/18/%E4%BB%8E%E6%97%A0%E5%88%B0%E6%9C%89%E5%85%8D%E8%B4%B9%E6%92%B8%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/image-20200218210933997.png" alt="image-20200218210933997"></p>
<p>注意：新建目录和标签都需要在主题菜单中配置好目录文件，详情请看上面的更换并配置主题，其中的Menu设置。</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>教程</tag>
      </tags>
  </entry>
  <entry>
    <title>Boss直聘爬虫实战</title>
    <url>/2020/02/18/Boss%E7%9B%B4%E8%81%98%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li><p>新建项目-新建PythonFile</p>
</li>
<li><p>安装爬虫模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure>
</li>
<li><p>requests的常用函数</p>
<ul>
<li>request.get()，对应http协议的get请求，也就是把网页下载下来。</li>
<li>request.post()，对应Http协议的post请求，就是把数据上传到网页服务器。</li>
</ul>
</li>
<li><p>观察boss直聘的url。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://www.zhipin.com/c101250100-p110101/</span><br></pre></td></tr></table></figure>

<ul>
<li>通过观察发现，后面应该是城市代码和职位代码</li>
<li>通过检查-network发现，城市代码应该是储存在city.json里面</li>
<li>职位代码应该是储存在position.json里面</li>
</ul>
</li>
</ul>
<p><img src="/2020/02/18/Boss%E7%9B%B4%E8%81%98%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98/image-20200220212318163.png" alt="image-20200220212318163"></p>
<p><img src="/2020/02/18/Boss%E7%9B%B4%E8%81%98%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98/image-20200220212422591.png" alt="image-20200220212422591"></p>
<p>通过观察：city.json的url为</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://www.zhipin.com/wapi/zpCommon/data/city.json</span><br></pre></td></tr></table></figure>

<p>postion.json的url为</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">https://www.zhipin.com/wapi/zpCommon/data/position.json</span><br></pre></td></tr></table></figure>

<p><img src="/2020/02/18/Boss%E7%9B%B4%E8%81%98%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98/image-20200220212709237.png" alt="image-20200220212709237"></p>
<h2 id="爬取城市代码"><a href="#爬取城市代码" class="headerlink" title="爬取城市代码"></a>爬取城市代码</h2><ul>
<li><p>测试连接</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="comment"># requests--&gt;请求</span></span><br><span class="line">url = <span class="string">'https://www.zhipin.com/wapi/zpCommon/data/city.json'</span>  <span class="comment"># boss直聘城市链接</span></span><br><span class="line">response = requests.get(url)  </span><br><span class="line">print(response)  <span class="comment"># 打印响应</span></span><br></pre></td></tr></table></figure>

<p>返回值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;Response [<span class="number">200</span>]&gt;</span><br></pre></td></tr></table></figure>

<p>200：代表返回成功</p>
<p>404：网络连接失败</p>
<p>500：服务器奔溃</p>
</li>
<li><p>加入浏览器伪装头’user-agent’，防止被服务器发现你是爬虫</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">headers = &#123;<span class="string">'user-agent'</span>: <span class="string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36'</span>&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>第一次打印</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line">url = <span class="string">'https://www.zhipin.com/wapi/zpCommon/data/city.json'</span>  <span class="comment"># boss直聘城市代码</span></span><br><span class="line">headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (X11; Linux x86_64) \</span></span><br><span class="line"><span class="string">AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36'</span>&#125;</span><br><span class="line">response = requests.get(url, headers=headers)</span><br><span class="line">data = response.json()  <span class="comment"># 从返回对象中提取json</span></span><br><span class="line">pprint(data)</span><br></pre></td></tr></table></figure>

<p>结果如下：</p>
<p><img src="/2020/02/18/Boss%E7%9B%B4%E8%81%98%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98/image-20200220223601456.png" alt="image-20200220223601456"></p>
<p>根据上图观察，返回的json可以当成是一个多层字典。</p>
</li>
</ul>
<p>  数据均在<code>zpData\cityList</code>下，于是对zpData进行第一次解包。</p>
<p>  <img src="/2020/02/18/Boss%E7%9B%B4%E8%81%98%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98/image-20200220230905431.png" alt="image-20200220230905431"></p>
<p>  对cityList进行第二次解包。</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> pprint <span class="keyword">import</span> pprint</span><br><span class="line">url = <span class="string">'https://www.zhipin.com/wapi/zpCommon/data/city.json'</span>  <span class="comment"># boss直聘城市代码</span></span><br><span class="line">headers = &#123;<span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (X11; Linux x86_64) \</span></span><br><span class="line"><span class="string">AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36'</span>&#125;</span><br><span class="line">response = requests.get(url, headers=headers)</span><br><span class="line">data = response.json()  <span class="comment"># 从返回对象中提取json</span></span><br><span class="line">data1 = data[<span class="string">'zpData'</span>][<span class="string">'cityList'</span>]</span><br><span class="line"><span class="comment"># pprint(data1)</span></span><br><span class="line"><span class="keyword">for</span> ii <span class="keyword">in</span> data1:</span><br><span class="line">    province = ii[<span class="string">'name'</span>]  <span class="comment"># 省名</span></span><br><span class="line">    province_code = ii[<span class="string">'code'</span>]  <span class="comment"># 省对应的代码</span></span><br><span class="line">    city_list = ii[<span class="string">'subLevelModelList'</span>]</span><br><span class="line">    <span class="keyword">for</span> ci <span class="keyword">in</span> city_list:</span><br><span class="line">      city = ci[<span class="string">'name'</span>]  <span class="comment"># 城市名</span></span><br><span class="line">        city_code = ci[<span class="string">'code'</span>]  <span class="comment"># 城市代码</span></span><br><span class="line">      print(province, <span class="string">'\t'</span>, province_code, <span class="string">'\t'</span>, city, <span class="string">'\t'</span>, city_code)</span><br></pre></td></tr></table></figure>

<p>  <img src="/2020/02/18/Boss%E7%9B%B4%E8%81%98%E7%88%AC%E8%99%AB%E5%AE%9E%E6%88%98/image-20200220230342508.png" alt="image-20200220230342508"></p>
<p>  省和城市代码就爬取完毕了，直接粘贴到excel就可以。至于如何直接导出excel，后面再说。</p>
]]></content>
      <categories>
        <category>Python爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>网易云网课记录</title>
    <url>/2020/02/18/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><ul>
<li><p>简称为OOP（Object Oriented Programming）</p>
</li>
<li><p>python中每一个值都是一个对象，整数、浮点数、字符串、列表都是对象</p>
</li>
<li><p>面向对象编程值得就是一个或者对个对象交互的概念</p>
</li>
<li><p>对象允许我们对现实世界中的概念进行建模</p>
<p>eg :</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">March_list = [<span class="number">541</span>, <span class="number">600</span>, <span class="number">200</span>, <span class="number">500.</span>..]  <span class="comment"># 这个列表记录了博物馆31天的参观人数</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>对象应包括数据（包含数字或者字符串）加上可以操作的运行（下面介绍类别的时候详细介绍这里）。</p>
</li>
</ul>
<h2 id="类别"><a href="#类别" class="headerlink" title="类别"></a>类别</h2><ul>
<li><p>每一个对象都属于一个类别</p>
<p>eg:  张三是一个自行车工厂的工人，它可以制造自行车，它属于自行车制造者。</p>
</li>
</ul>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><ul>
<li><p>每一个类别都有自己的属性</p>
<p>eg: 对于一辆自行车，它的颜色，尺寸，类型都可以作为他的属性</p>
</li>
</ul>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul>
<li><p>每一个类别都应该有自己的方法，它是一个可以应用与对象的结果逻辑序列。</p>
<ul>
<li><p>对象的方法可以是一个指令</p>
<p>eg：对于自行车，它的方法可能是向左转，向右转，减速，加速</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">objects.turn_left()  <span class="comment"># 向左转</span></span><br><span class="line">objects.turn_right()  <span class="comment"># 向右转</span></span><br><span class="line">objects.slow_down()  <span class="comment"># 减速</span></span><br><span class="line">objects.accelerate()  <span class="comment"># 加速</span></span><br></pre></td></tr></table></figure>

<p>eg2: 创建一个列表（列表也是对象）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="number">15</span>, <span class="number">12</span>, <span class="number">64</span>]  <span class="comment"># 实例化列表对象，这个对象属于列表类别</span></span><br><span class="line"><span class="comment"># 它的一个属性就是它的元素的数据类型，子元素属于整数。</span></span><br><span class="line">list1.extend([<span class="number">5</span>,<span class="number">6</span>, <span class="number">7</span>])  <span class="comment"># 扩展是列表对象的一个方法</span></span><br><span class="line">print(list1)</span><br><span class="line">list1.append(<span class="number">8</span>)  <span class="comment"># 追加也是列表对象的一个方法</span></span><br><span class="line">print(list1)</span><br></pre></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">15</span>, <span class="number">12</span>, <span class="number">64</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">[<span class="number">15</span>, <span class="number">12</span>, <span class="number">64</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="方法与函数"><a href="#方法与函数" class="headerlink" title="方法与函数"></a>方法与函数</h3><table>
<thead>
<tr>
<th align="center">区别</th>
<th align="center">方法</th>
<th align="center">函数</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">方法是一种特别的函数</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">方法包含的参数中，一定有一个参数是对象本身</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">方法属于某个类别，而函数可以独立存在</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">objects.function()</td>
<td align="center">function()</td>
</tr>
</tbody></table>
<p>eg: 对于自行车的向左转方法，如果没有自行车这个对象，那么向左转也就不成立了。</p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bike</span><span class="params">(color, size)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    定义一个类别：自行车</span></span><br><span class="line"><span class="string">    自行车包含两个属性，color:颜色，size:大小</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">turn_left</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        定义一个方法，向左转</span></span><br><span class="line"><span class="string">        它属于自行车这个类。</span></span><br><span class="line"><span class="string">        它包含了基本参数:self，self代表自行车这个对象</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">bike1 = bike(color=<span class="string">'红色'</span>, size=<span class="number">22</span>)  <span class="comment"># 实例化自行车这个类。</span></span><br><span class="line"><span class="comment"># 代表创建一个红色的，大小为22的自行车</span></span><br><span class="line">bike1.turn_left() <span class="comment"># 控制自行车往左转。self参数代表对象本身，使用的时候一般省略。</span></span><br></pre></td></tr></table></figure>

<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><ul>
<li><p>模块是一种预写代码，包含变量的定义，函数和类别</p>
</li>
<li><p>它可以十分方便的加载到新的程序当中，可以帮我们省略很多代码。</p>
</li>
<li><p>导入模块的五种方法</p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math  <span class="comment"># 导入math模块</span></span><br><span class="line">print(math.sqrt(<span class="number">4</span>))  <span class="comment"># 计算４的平方根</span></span><br></pre></td></tr></table></figure>

<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt  <span class="comment"># 从math模块中导入sqrt函数</span></span><br><span class="line">print(sqrt(<span class="number">4</span>))  <span class="comment"># 计算４的平方根</span></span><br></pre></td></tr></table></figure>

<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> sqrt <span class="keyword">as</span> s  </span><br><span class="line"><span class="comment"># 从math模块中导入sqrt函数,并且给它一个简称为s</span></span><br><span class="line">print(s(<span class="number">4</span>))  <span class="comment"># 计算４的平方根</span></span><br></pre></td></tr></table></figure>

<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math <span class="keyword">as</span> s  <span class="comment"># 导入math模块并且给一个别称为s</span></span><br><span class="line">print(s.sqrt(<span class="number">4</span>))  <span class="comment"># 计算４的平方根</span></span><br></pre></td></tr></table></figure>

<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> *  <span class="comment"># 从math模块中导所有函数</span></span><br><span class="line">print(sqrt(<span class="number">4</span>))  <span class="comment"># 计算４的平方根</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><ul>
<li><p>包是相关python代码的集合，可以简单理解为模块的集合就是包</p>
<p>包-&gt;模块-&gt;类-&gt;函数</p>
</li>
</ul>
<h2 id="python标准模块库"><a href="#python标准模块库" class="headerlink" title="python标准模块库"></a>python标准模块库</h2><ul>
<li>当前可用模块的集合</li>
</ul>
<h2 id="Python常用数据分析库"><a href="#Python常用数据分析库" class="headerlink" title="Python常用数据分析库"></a>Python常用数据分析库</h2><ul>
<li>numpy</li>
<li>pandas</li>
<li>matplotlib    # 可视化工具</li>
<li>scipy   # 三合一工具包</li>
<li>statsmodels  # 包含描述性统计</li>
</ul>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul>
<li><p>数组是任何编程语言中的基本数据结构</p>
</li>
<li><p>数据可以把数据组织成向量、矩阵和其它多维对象</p>
</li>
<li><p>数组中的对象称为数组元素</p>
</li>
<li><p>数组和列表的最大区别就是，数组中的数组元素都必须为相同数据类型。而列表可能同时包含整数，字符串，浮点数。</p>
<p>eg:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line">print(a)</span><br><span class="line">print(type(a))</span><br></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]]</span><br><span class="line">&lt;<span class="class"><span class="keyword">class</span> '<span class="title">numpy</span>.<span class="title">ndarray</span>'&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>ndarray</code>: Numpy n-dimensional array :代表Numpy的N维数组。</p>
</li>
<li><p>查看形状</p>
<p>eg</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(a.shape)  <span class="comment"># 结果是(2, 3)  # 代表两行三列</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>访问位置</p>
<p>eg</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(a[<span class="number">1</span>, <span class="number">1</span>])  <span class="comment"># 打印第二行第二列，结果是5</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果只输入一个索引，默认为行索引</p>
<p>eg：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(a[<span class="number">0</span>])  <span class="comment"># 提取第一行的数据</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">输出结果</span></span><br><span class="line"><span class="string">[0 1 2]</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>一维数组(也称为向量)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">b = np.array([<span class="number">3</span>, <span class="number">5</span>])</span><br><span class="line">print(b)</span><br><span class="line"><span class="comment"># [3, 5]  可以看出数学向量的（3,5）</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>二位数组，也称为矩阵</p>
</li>
<li><p>numpy生成数组</p>
<p>eg</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">c = np.random.randint(<span class="number">1</span>, <span class="number">6</span>, [<span class="number">4</span>, <span class="number">6</span>])</span><br><span class="line"><span class="comment"># 生成一个随机整数（整数卫于1,6之间）构成的一个4*6的矩阵</span></span><br><span class="line">print(c)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[[<span class="number">5</span> <span class="number">1</span> <span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">2</span> <span class="number">2</span> <span class="number">1</span> <span class="number">4</span> <span class="number">1</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">4</span> <span class="number">1</span> <span class="number">3</span> <span class="number">5</span> <span class="number">3</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">2</span> <span class="number">1</span> <span class="number">1</span> <span class="number">5</span> <span class="number">1</span>]]</span><br></pre></td></tr></table></figure>
</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Xpath</title>
    <url>/2020/02/17/XPath/</url>
    <content><![CDATA[<ul>
<li>在XML文件中查找信息的一套规则/语言，根据XML的元素或者属性进行遍历。</li>
</ul>
<h2 id="Xpath-开发工具"><a href="#Xpath-开发工具" class="headerlink" title="Xpath 开发工具"></a>Xpath 开发工具</h2><ul>
<li>开源表达式编辑工具：XMLQuire</li>
<li>Chorme插件：Xpath Helper</li>
</ul>
<h2 id="选取节点"><a href="#选取节点" class="headerlink" title="选取节点"></a>选取节点</h2><ul>
<li>nodename:选取此节点的所有节点</li>
<li>/ :根节点</li>
<li>// :选取节点，不考虑位置</li>
<li>. ：选取当前节点</li>
<li>.. ：选取当前节点的父节点</li>
<li>@ ：选取属性</li>
<li>/ :一般安装路径查找，表示它的子节点</li>
<li>// :表示它的后代，包括子、孙<ul>
<li>//Age[@Dtail] : 选取带Detail的Age元素</li>
</ul>
</li>
<li>谓语-Predicates<ul>
<li>/School/Student[1]  :选取School下面第一个节点</li>
<li>/School/Student[last()]  : 选取School下面最后一个节点</li>
<li>/School/Student[position()&lt;3]  : 选取School下面前三个节点</li>
<li>//Student[@score=”99”]  选取属性带有99的节点</li>
</ul>
</li>
</ul>
<h2 id="Xpath的一些操作"><a href="#Xpath的一些操作" class="headerlink" title="Xpath的一些操作"></a>Xpath的一些操作</h2><ul>
<li>| ：或者<ul>
<li>//Student | //Teacher 2选1</li>
</ul>
</li>
<li>其余不常见Xpath运算符合 +， - ，*， div, &gt;, &lt;</li>
</ul>
]]></content>
      <categories>
        <category>Python爬虫</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Django学习笔记</title>
    <url>/2020/02/17/Django%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<ul>
<li>环境<ul>
<li>Python3.6</li>
<li>django1.8</li>
</ul>
</li>
<li>参考资料<ul>
<li>django架站的16堂课。</li>
</ul>
</li>
</ul>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><ul>
<li><p>anaconda使用</p>
<ul>
<li>conda list:显示当前环境安装的包</li>
<li>conda env list:显示安装的虚拟环境列表</li>
<li>conda create -n env_name python=3.7</li>
<li>激活conda的虚拟环境<ul>
<li>（Linux） source activate env_name</li>
<li>（Win）conda activate env_name</li>
<li>安装django <code>pip install django==1.8</code></li>
</ul>
</li>
</ul>
</li>
<li><p>django创建项目</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">django-admin startproject tulingxueyuan</span><br></pre></td></tr></table></figure>
</li>
<li><p>djiango启动项目</p>
<ul>
<li><p>1.命令行启动</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure>
</li>
<li><p>Pycharam启动</p>
<ul>
<li>需要改manage.py的配置，增加参数</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="一、路由系统-urls"><a href="#一、路由系统-urls" class="headerlink" title="一、路由系统 -urls"></a>一、路由系统 -urls</h2><ul>
<li><p>创建app</p>
<ul>
<li><p>app:负责一个具体业务或者一类具体业务的模块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py startapp teacher</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>路由</p>
<ul>
<li>按照具体的请求url，导入到相应业务处理模块的一个功能</li>
<li>django的信息控制中枢</li>
<li>本质上是接受的URL和相应处理模块的一个映射</li>
<li>在接受URL请求的匹配上使用了re</li>
<li>URL的具体格式请入urls.py中所示。</li>
</ul>
</li>
<li><p>需要关注的两点：</p>
<ul>
<li>接受的URL是什么，即如何用RE对传入的URL进行匹配</li>
<li>已知URL匹配到哪个模块</li>
</ul>
</li>
<li><p>url匹配规则</p>
<ol>
<li><p>从上往下写</p>
</li>
<li><p>一级一级往下匹配</p>
</li>
<li><p>子url一旦被调用，不会返回主url</p>
</li>
<li><p>正则以r开头，表示不专一。尖括号(^)和美元符号($)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">r'^one/'</span>  <span class="comment"># 第一个斜杠可以省略，可以匹配/one/two/there</span></span><br></pre></td></tr></table></figure>

</li>
</ol>
</li>
</ul>
<h3 id="1-正常映射"><a href="#1-正常映射" class="headerlink" title="1.正常映射"></a>1.正常映射</h3><ul>
<li><p>把某一个符号RE的URL映射到失误处理函数中去</p>
</li>
<li><pre><code class="python">urlpatterns = [
    <span class="comment"># Examples:</span>
    <span class="comment"># url(r'^$', 'beijingtulingxueyuan.views.home', name='home'),</span>
    <span class="comment"># url(r'^blog/', include('blog.urls')),</span>

    url(<span class="string">r'^admin/'</span>, include(admin.site.urls)),
    url(<span class="string">r'^normalmap'</span>, do_normarl_map)

]
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 2.URL带参数映射</span><br><span class="line"></span><br><span class="line">- 在时间处理代码中需要由URL传入参数，形如&#x2F;myurl&#x2F;params</span><br><span class="line"></span><br><span class="line">- 参数都是字符串形式，如果需要整数等形式需要自行转换</span><br><span class="line"></span><br><span class="line">- 通常的形式如下,其中432需要经常变化，所以作为参数传入</span><br><span class="line"></span><br><span class="line">  - 尖括号表示以后面内容开头的表达式</span><br><span class="line">  - 元好看代码的是一个参数，里面的内容作为参数传递被调用的函数</span><br><span class="line">  - 参数名称以问号加大写P开头，尖括号里面就是参数的名称</span><br><span class="line">  - 尖括号后面表示正则</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;python</span><br><span class="line">  &#x2F;search&#x2F;page&#x2F;432</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">	url(<span class="string">r'withparam/(?P&lt;year&gt;[0-9]&#123;&#125;)/(?P&lt;month&gt;[0,1][0-9])'</span>, sv.withparam)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<h3 id="3-URL在app中处理"><a href="#3-URL在app中处理" class="headerlink" title="3. URL在app中处理"></a>3. URL在app中处理</h3><ul>
<li>如果可以应用URL都集中在首目录下的urls中，可能导致文件过于臃肿</li>
<li>可以把urls具体功能逐渐分散到各个app中<ul>
<li>从django.conf.urls 导入include</li>
<li>注意此时RE部分的写法，自路由不需要在以什么开头</li>
<li>添加Include导入</li>
</ul>
</li>
<li>使用方法<ul>
<li>确保include被导入</li>
<li>写主路由的开头url</li>
<li>写自路由</li>
<li>编写views</li>
</ul>
</li>
</ul>
<h3 id="4-URL中的嵌套参数"><a href="#4-URL中的嵌套参数" class="headerlink" title="4.URL中的嵌套参数"></a>4.URL中的嵌套参数</h3><ul>
<li><p>捕捉参数的某一部分</p>
<ul>
<li><p>例如URL:/index/page-3,需要捕捉数字3作为参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url(<span class="string">r'index/(page-([0-9]+)/)?$'</span>, sv.myindex),  <span class="comment"># 不太好</span></span><br><span class="line">url(<span class="string">r'index/(?:page-(?P&lt;page_number&gt;[0-9]+)/)?$'</span>, sv.myindex)</span><br><span class="line"><span class="comment"># ?:page 表示忽略该参数</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="5-传递额外参数"><a href="#5-传递额外参数" class="headerlink" title="5.传递额外参数"></a>5.传递额外参数</h3><ul>
<li><p>参数不仅仅来自于URL,也可能来自我们自己定义的内容</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url(<span class="string">r'extrem/$'</span>, sv.extremParam, &#123;<span class="string">'name'</span>: <span class="string">"liuying"</span>&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="6-URL的方向解析"><a href="#6-URL的方向解析" class="headerlink" title="6.URL的方向解析"></a>6.URL的方向解析</h2><ul>
<li>防止硬编码</li>
<li>本质上是对每一个URL进行命名</li>
<li>一台再编码的时候使用URL的值，原则上都可以使用反向解析</li>
</ul>
<h2 id="二、视图"><a href="#二、视图" class="headerlink" title="二、视图"></a>二、视图</h2><h3 id="1-视图概述"><a href="#1-视图概述" class="headerlink" title="1.视图概述"></a>1.视图概述</h3><ul>
<li>视图即视图函数，接收web请求，并返回相应的事务处理函数</li>
<li>相应值符号http协议要求的任何内容，包括json,string,html</li>
<li>本章忽略事物处理，重点在如何返回处理结果上</li>
</ul>
<h3 id="2-其他简单视图"><a href="#2-其他简单视图" class="headerlink" title="2.其他简单视图"></a>2.其他简单视图</h3><ul>
<li>django.http代码即可查看</li>
<li>此类视图使用方法基本类似，可以通过return语句返回给浏览器</li>
</ul>
<h3 id="3-HttpResponse详解"><a href="#3-HttpResponse详解" class="headerlink" title="3.HttpResponse详解"></a>3.HttpResponse详解</h3><ul>
<li>方法<ul>
<li>init:使用也内容实例化HttpResponse对象</li>
<li>write(content)以文件的方式写</li>
<li>flush():以文件的方式输出缓存区</li>
<li>set_cookie(key, values=’’, max_age=None, expires=None):设置cookie<ul>
<li>key,value都是字符串类型</li>
<li>max_age是一个整数，表示在指定秒数后过期</li>
<li>expires是一个datetime或者timedalta对象，回话将在指定的日期/时间过期</li>
<li>max_age和expires二选一</li>
<li>如果不指定过期时间，则两个星期后过期</li>
</ul>
</li>
<li>delete_cookie(key):删除指定key的cookie,如果key不存在则什么都没有发生</li>
</ul>
</li>
</ul>
<h3 id="4-HttpResponseRedirect"><a href="#4-HttpResponseRedirect" class="headerlink" title="4.HttpResponseRedirect"></a>4.HttpResponseRedirect</h3><ul>
<li>重定向，服务器端跳转</li>
<li>构造函数的第一个参数用来指向重定向的地址</li>
</ul>
<h3 id="5-HttpRequst"><a href="#5-HttpRequst" class="headerlink" title="5.HttpRequst"></a>5.HttpRequst</h3><ul>
<li>Request介绍<ul>
<li>服务器接受到http协议的请求后，会根据报文创建HttpRequest对象</li>
<li>视图函数的第一个参数就是HttpRequest对象</li>
<li>在django.http模块中定义了HttpRequest对象的API</li>
</ul>
</li>
<li>属性<ul>
<li>下面除非特别说明，属性都是只读的</li>
<li>path:一个字符串，表示请求页面的完整路径，不包含域名</li>
<li>method:一个字符串，表示请求方法</li>
<li>encoding:一个字符串，表示提交的数据编码方式<ul>
<li>如果为None,则默认为utf-8</li>
<li>属性是可写的，可以通过修改它来访问表单使用</li>
</ul>
</li>
<li>GET:一个类似于字典的对象，包含get请求方式的所有参数(推荐get方法)</li>
<li>POST:一个类似字典的对象，包含post请求方式的素有参数</li>
<li>FILES:一个类似字典对象，包含所有的上传文件</li>
<li>COOKIES:一个标准的Python子弟那，包含所有的cookie,键和值均为字符串。</li>
<li>session:一个既可读也可写的类似字典的对象，表示当前会话<ul>
<li>只有当Django启用会话的支持时才可用</li>
<li>详细内容见“状态抱持”</li>
</ul>
</li>
</ul>
</li>
<li>方法<ul>
<li>is_ajax():如果请求是通过XMLHttpRequest发起的，则返回True</li>
<li>QueryDict对象<ul>
<li>定义在django.http.QueryDict</li>
<li>request对象的属性GET、POST对象都是QueryDict类型的对象</li>
<li>与Python字典不同，QueryDict可以用来处理一个键带多个值的情况</li>
<li>使用方法：<ul>
<li>get(),根据键获取值<ul>
<li>只能获取键的一个值</li>
<li>如果一个键有多个值，则获取最后一个值</li>
</ul>
</li>
<li>getlist(),根据键获取值<ul>
<li>将键的值以列表返回，可以获取一个键的所有值</li>
</ul>
</li>
</ul>
</li>
<li>GET属性：<ul>
<li>QueryDict类型的对象</li>
<li>包含get请求方法的所有参数</li>
<li>与url请求地址的参数对应，位于？后面</li>
<li>参数的格式是键值对，如key=value</li>
<li>多个参数之间，用&amp;连接，如key1=value1&amp;key2=value2</li>
<li>键是开发人员定下来的，值是可变的</li>
</ul>
</li>
<li>POST属性<ul>
<li>QueryDict类型的对象</li>
<li>包含post请求方式的素有参数</li>
<li>与form表单中的控件对应</li>
<li>表单中空间必须有name属性，name为键，value为值<ul>
<li>checkbox存在一键多值的情况</li>
</ul>
</li>
<li>键是开发人员定下来的，值是可变的</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="6-手动编写一个View"><a href="#6-手动编写一个View" class="headerlink" title="6.手动编写一个View"></a>6.手动编写一个View</h3><ul>
<li><p>实验目的</p>
<ul>
<li>利用django提供的快捷函数手动编写视图处理函数</li>
<li>返回response，</li>
</ul>
</li>
<li><p>业务处理:</p>
</li>
<li><p>利用response的子类</p>
<ul>
<li>拿到模板</li>
<li>拿到数据</li>
<li>环境变量</li>
</ul>
</li>
<li><p>了解视图运行原理</p>
</li>
<li><p>分析：</p>
<ul>
<li>django把所有请求封装入request</li>
<li>django通过urls木块把相应请求和时间处理函数连接起来，做request作为参数返回。</li>
<li>在相应的处理函数中，我们需要完成两部分<ul>
<li>处理业务</li>
<li>把结果封装并且返回，我们可以使用简单的httpResponse</li>
</ul>
</li>
<li>本案例不介绍业务处理，把目光集中在渲染结果并返回</li>
</ul>
</li>
<li><p>常用函数</p>
<ul>
<li>render(request, template_name[,content_instance]):<ul>
<li>使用模板和一个给定的上下文环境，返回一个渲染的httprespnse</li>
<li>request:django的传入请求</li>
<li>template_name:模板名称</li>
<li>content_instance:上下文环境</li>
</ul>
</li>
<li>render_to_response(推荐使用上面的)</li>
</ul>
</li>
</ul>
<h3 id="7-系统内建视图"><a href="#7-系统内建视图" class="headerlink" title="7.系统内建视图"></a>7.系统内建视图</h3><ul>
<li>系统内建视图，可以直接使用</li>
<li>比如404,500,401,403</li>
</ul>
<h3 id="8-基于类的视图"><a href="#8-基于类的视图" class="headerlink" title="8.基于类的视图"></a>8.基于类的视图</h3><ul>
<li>和基于函数的视图的优势和区别<ul>
<li>可以面向对象变成</li>
</ul>
</li>
<li>概述<ul>
<li>核心是允许使用不同的实例和方法来响应不同的HTTP请求方法，从而避开分支条件实现</li>
<li>as_view函数作为类的可调用库，该方法创建一个实例并调用dispatch方法，按照类方法去请求。如果类方法没有定义，则引发HttpResponseNotAllow</li>
<li>类属性使用<ul>
<li>在类定义的时候直接覆盖</li>
<li>在调用as_view的时候直接作为参数使用，例如：</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="三、模型"><a href="#三、模型" class="headerlink" title="三、模型"></a>三、模型</h2><h3 id="1-ORM"><a href="#1-ORM" class="headerlink" title="1.ORM"></a>1.ORM</h3><ul>
<li>ObjectRelationMap实体关系映射,把面向对象的思想转化为关系型数据库</li>
<li>类对应表格</li>
<li>类的属性对应表中的字段</li>
<li>在对应的models.py文件中定义class</li>
</ul>
<h3 id="2-django链接数据库"><a href="#2-django链接数据库" class="headerlink" title="2.django链接数据库"></a>2.django链接数据库</h3><ul>
<li><p>自带默认数据库sqllite3</p>
<ul>
<li>轻量级数据库</li>
<li>轻量级</li>
</ul>
</li>
<li><p>建议开发使用sqllite3,部署用mysql之类的数据库</p>
<ul>
<li><p>django链接数据库,切换数据库在settings中设置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DATABASES &#x3D; [</span><br><span class="line">	&#39;default&#39; &#x3D; &#123;</span><br><span class="line">		&#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,</span><br><span class="line">		&#39;NAME&#39;: &#39;数据库名&#39;,</span><br><span class="line">		&#39;PASSWORD&#39;: &#39;数据库密码&#39;,</span><br><span class="line">		&#39;HOST&#39;:&#39;127.0.0.01&#39;,</span><br><span class="line">		&#39;PORT&#39;:&#39;3306&#39;,</span><br><span class="line">	&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
</li>
<li><p>需要在项目文件’init’中导入pymysql</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="3-model类的使用"><a href="#3-model类的使用" class="headerlink" title="3.model类的使用"></a>3.model类的使用</h3><ul>
<li><p>定义和数据库表的映射的分类</p>
<ul>
<li>在app下的model.py</li>
<li>所有需要使用的ORM的class必须是models.Mondel的子类</li>
<li>字段的类型都必须使用modles.xxx，不能使用Python的</li>
<li>在django中，model负责和数据库交互。</li>
</ul>
</li>
<li><p>字段常用参数</p>
<ul>
<li>max_length:规定数值的最大长度</li>
<li>blank:是否允许字段为空，默认不允许</li>
<li>null:在DB中是否保存为null,默认为false</li>
<li>default:默认值</li>
<li>unique:唯一值</li>
<li>verbose_name:假名</li>
</ul>
</li>
<li><p>数据库的迁移</p>
<ol>
<li><p>在命令行中，生成数据迁移语句（自动生成sql语句）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 manage.py makemigrations</span><br></pre></td></tr></table></figure>
</li>
<li><p>在命令行中，输入数据迁移指定</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 manage.py migrate</span><br></pre></td></tr></table></figure>

<p>ps:如果迁移中出现没有变化或者保存，可以尝试强制迁移</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 强制迁移</span></span><br><span class="line">python3 manage.py makemigrations 应用名</span><br><span class="line">python3 manage.py migrate 应用名</span><br></pre></td></tr></table></figure>
</li>
<li><p>对于默认数据库，为了避免出现混乱，为了避免出现混乱，可以把自带的migrations和没有数据的sqlite3删除</p>
</li>
</ol>
</li>
</ul>
<h3 id="4-利用shell查看数据库中的数据"><a href="#4-利用shell查看数据库中的数据" class="headerlink" title="4.利用shell查看数据库中的数据"></a>4.利用shell查看数据库中的数据</h3><ol>
<li><p>启动命令行，python3 manage.py shell</p>
<p>注意点：对ORM的操作分为静态函数和非静态函数两种，静态函数是指内存只有一份，非静态指每个实例掌握一份</p>
</li>
<li><p>在命令行中导入对应的映射类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> 应用名.models <span class="keyword">import</span> 类名</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用objects属性操作数据库，objects是模型实际和数据库进行交互的</p>
</li>
<li><p>查询命令</p>
<ul>
<li>类名.objects.all()查询数据库表中的所有内容，返回一个QueryList</li>
<li>类名.objects.filter(过滤条件)</li>
</ul>
</li>
<li><p>常用查找格式：</p>
<ol>
<li><p>通用查找：属性名_   _（用下面的内容）= 值</p>
<ul>
<li><p>gt:大于</p>
</li>
<li><p>gte:大于等于</p>
<pre><code>- lt:小于</code></pre></li>
</ul>
</li>
</ol>
<ul>
<li><p>lte:小于等于</p>
</li>
<li><p>range:范围</p>
</li>
<li><p>year:年费</p>
</li>
<li><p>isnull</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Teacher.objects.filter(age__gte=<span class="number">18</span>)  <span class="comment"># 查询年纪大于等于18的老师</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="2">
<li>模糊查找<ul>
<li>exact:精确等于</li>
<li>iexact:不区分大小写</li>
<li>contains:包含</li>
<li>startwith:以什么开头</li>
<li>endwith:以什么结尾</li>
</ul>
</li>
</ol>
</li>
</ol>
<h3 id="5-数据库表的关系"><a href="#5-数据库表的关系" class="headerlink" title="5.数据库表的关系"></a>5.数据库表的关系</h3><ol>
<li><p>多表联查，利用多个表联合查找一项信息或者多项信息。</p>
<ul>
<li><p>一比一关系</p>
<ul>
<li><p>建立关系：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">models.OneToOneField(School)  # 括号里面有类</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加元素：</p>
<ul>
<li><p>先添加没有关系的一边，直接实例化保存即可。</p>
</li>
<li><p>有关系的那一边，此时可以实例化或者使用create方法。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">Manager.object.create(manager_id=?,manager_name='?',my_school=?)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>查询元素</p>
<ul>
<li><p>由子表差母表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Manger.objects.get(manager_name=<span class="string">'大拿'</span>).my_school.school_name</span><br></pre></td></tr></table></figure>
</li>
<li><p>由母表查子表，使用双下划线</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">School.objects.get(manager__manager_name=<span class="string">'大拿'</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>修改元素</p>
<ul>
<li><p>查询后直接赋值修改即可。（单个修改）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = School.objects.get(school_id=<span class="number">1</span>)</span><br><span class="line">s.school_name = <span class="string">'南京图灵学院'</span></span><br><span class="line">s.save()</span><br></pre></td></tr></table></figure>
</li>
<li><p>多个修改（使用update）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ss = School.objects.all()</span><br><span class="line">ss.update(school_name=<span class="string">'图灵学院'</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>一对多关系</p>
<ul>
<li><p>一个表格的一个数据项、对象等，可以很多个另外一个表格的多个数据项。如：一个学校有多个老师。</p>
</li>
<li><p>使用方法：</p>
<ul>
<li><p>使用ForengnKey</p>
</li>
<li><p>在多的那边定义，在Teacher那里定义，被学校约束,需要字符串。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">schools = models.ForeignKey(<span class="string">"School"</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>增加</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xx.objects.create(xx=xx)</span><br><span class="line">new一个</span><br></pre></td></tr></table></figure>
</li>
<li><p>查找</p>
<ul>
<li><p>如果知道老师，查学校，则通过增加的关系属性，直接使用。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1.schools.school_name</span><br></pre></td></tr></table></figure>
</li>
<li><p>知道学校，查所有老师，则系统自动老师的名字下添加了set</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">teacher_set.all()</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ol>
<ul>
<li><p>多对多关系</p>
<ul>
<li><p>表示一个表的数据可以拥有对方表格的多项数据，反之亦然。</p>
</li>
<li><p>使用上，在任意乙方，使用ManyToMany定义。</p>
</li>
<li><p><strong>增加</strong></p>
<ul>
<li>添加老师，需要先save一个空值，再sutdent.teachers.add()</li>
</ul>
</li>
<li><p><strong>查询</strong></p>
<ul>
<li><p>和一对多方法一样</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t1.student_set.all()</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="四、模板系统"><a href="#四、模板系统" class="headerlink" title="四、模板系统"></a>四、模板系统</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h3><ul>
<li>模板：一组相同或者想死的页面，在需要个性化的地方进行留白，需要的时候拿数据填充就可以使用。</li>
</ul>
<h3 id="2-使用步骤"><a href="#2-使用步骤" class="headerlink" title="2. 使用步骤"></a>2. 使用步骤</h3><ol>
<li>在settings中进行设置：TEMPLATES.<ol>
<li>注意：路径用BASE_DIR拼接，不要用绝对路径。</li>
<li>新建的文件夹建议使用templates命名，约定俗成。</li>
</ol>
</li>
<li>在templates文件夹下编写模板并调用。</li>
</ol>
<h3 id="3-模板变量"><a href="#3-模板变量" class="headerlink" title="3.模板变量"></a>3.模板变量</h3><ul>
<li><p>变量表示方式，:var_name:变量名</p>
</li>
<li><p>系统调用模板的时候，会用相应的数据查找相应的变量名称，如果能找到，则找到渲染，找不到也不会报错。</p>
</li>
<li><p>调用方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">render(request,<span class="string">'template_name'</span>,content=dict())</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="4-模板的标签"><a href="#4-模板的标签" class="headerlink" title="4.模板的标签"></a>4.模板的标签</h3><ul>
<li><p>for标签</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;%  <span class="keyword">for</span> .. <span class="keyword">in</span> .. %&#125;</span><br><span class="line">循环语句</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>if标签，用来判断条件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;%  <span class="keyword">if</span> %&#125;</span><br><span class="line">	代码<span class="number">1</span></span><br><span class="line">&#123;% <span class="keyword">elif</span> %&#125;</span><br><span class="line">	代码<span class="number">1</span></span><br><span class="line">&#123;% <span class="keyword">else</span> %&#125;</span><br><span class="line">	代码<span class="number">1</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>csrf标签</p>
<ul>
<li><p>跨站伪造标签</p>
</li>
<li><p>在提交表单的时候，表单页面需要加上(同时需要设置开启。)</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;% csrf_token %&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h2 id="5-session"><a href="#5-session" class="headerlink" title="5.session"></a>5.session</h2><h3 id="1-作用"><a href="#1-作用" class="headerlink" title="1. 作用"></a>1. 作用</h3><ol>
<li>为了应对http协议的无状态性</li>
<li>为了保持用户比较敏感的信息</li>
<li>输入request的一个数学<h3 id="2-常用操作"><a href="#2-常用操作" class="headerlink" title="2. 常用操作"></a>2. 常用操作</h3></li>
<li>request.session.get(key, defaultValue) # defualtvalue为请求不到的默认返回值</li>
<li>request.session.clear()  # 清空session</li>
<li>request.session[key] = value  # 赋值</li>
<li>request.session.flush() #删除当前的session和cookies</li>
<li>del requst.session  # 删除</li>
</ol>
<h2 id="6-分页"><a href="#6-分页" class="headerlink" title="6.分页"></a>6.分页</h2><ul>
<li><p>django提供了现成的分液器用来对结果进行分页。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> djangdo.core.paginator <span class="keyword">import</span> Paginator</span><br><span class="line">p = Paginator()</span><br><span class="line"><span class="comment"># 两个参数。1.数据来源，2单页返回数量</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
]]></content>
      <categories>
        <category>PythonWeb</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>Web开发</tag>
      </tags>
  </entry>
  <entry>
    <title>wps正则表达式</title>
    <url>/2020/02/17/wps%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="正则准备工作"><a href="#正则准备工作" class="headerlink" title="正则准备工作"></a>正则准备工作</h3><ul>
<li><kbd>ctrl</kbd> + <kbd>F</kbd>,’高级搜索’–&gt;’使用通配符’</li>
</ul>
<h3 id="常用符号"><a href="#常用符号" class="headerlink" title="常用符号"></a>常用符号</h3><ul>
<li><p>[] 代表出现的东西</p>
<ul>
<li>[1] 数字1</li>
<li>[0-9] 数字0-9</li>
<li>[a-z] 全部小写字母</li>
<li>[A-Z] 全部大写字母</li>
<li>[0-9a-zA-Z] 数字或字母</li>
</ul>
</li>
<li><p>{}代表出现次数</p>
<ul>
<li>{1} 出现一次</li>
<li>{1,10}出现一次到10次</li>
</ul>
</li>
<li><p>| 或，两者二选一，需要用括号</p>
</li>
<li><p>()代表一组</p>
</li>
<li><p>案例，提取18或13开头的11位数字</p>
</li>
<li><pre><code class="shell">(18|13)[0-9]{9}
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 通配符</span><br><span class="line"></span><br><span class="line">- &quot; * &quot;:代表出现0-n次,任意字符，但不能包括回车键</span><br><span class="line">- &quot; ? &quot;:代表出现1次，任意字符，但不能包括回车键</span><br><span class="line">- ! 代表否的意思，不出现</span><br><span class="line">- !&#x3D;</span><br><span class="line"></span><br><span class="line">案例2：寻找王姓名字的人</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;shell</span><br><span class="line">王?&#123;1,2&#125;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ul>
<p>案例3，提取张姓同学的电话及号码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">张?&#123;1,2&#125; *[0-9]&#123;11&#125;</span><br></pre></td></tr></table></figure>

<p>案例三，提取姓名及电话</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">?([! |!\<span class="type">n</span>]&#123;<span class="number">2</span>,<span class="number">3</span>&#125;) *([<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">11</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>案例4，提取所有日期</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">4</span>&#125;?[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">1</span>,<span class="number">2</span>&#125;?[<span class="number">0</span>-<span class="number">9</span>]&#123;<span class="number">1</span>,<span class="number">2</span>&#125;</span><br></pre></td></tr></table></figure>

<p>案例5，提取所有 1996 年以前出生的学生</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[! ]&#123;2,3&#125;?&#123;1,11&#125;[1][0-9]&#123;2&#125;[0-5]?[0-9]&#123;1,2&#125;?[0-9]&#123;1,2&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>办公</category>
      </categories>
      <tags>
        <tag>wps</tag>
      </tags>
  </entry>
  <entry>
    <title>python分支结构</title>
    <url>/2020/02/17/%E5%88%86%E6%94%AF%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p>用于做选择判断</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>:条件<span class="number">1</span></span><br><span class="line">	xxxxx</span><br><span class="line"> <span class="keyword">else</span>:</span><br><span class="line">	 xxxxxx</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a  = <span class="number">10</span></span><br><span class="line"><span class="keyword">if</span> a&gt; <span class="number">20</span>:</span><br><span class="line">	print(<span class="string">"a比20大"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	print(<span class="string">"a比20小"</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>分支嵌套</li>
<li>if里面嵌套if<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>:</span><br><span class="line">	<span class="keyword">if</span> 条件<span class="number">2</span>：</span><br><span class="line">	<span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">else</span>:</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>多重分支</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件<span class="number">1</span>：</span><br><span class="line">	代码块</span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">2</span>：</span><br><span class="line">	代码块</span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">3</span></span><br><span class="line">	代码块</span><br><span class="line"><span class="keyword">elif</span> 条件<span class="number">4</span></span><br><span class="line">	代码块</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">	代码块</span><br></pre></td></tr></table></figure>

<p>嵌套</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> x &gt;= <span class="number">90</span>:</span><br><span class="line">	xxx</span><br></pre></td></tr></table></figure>

<h2 id="input"><a href="#input" class="headerlink" title="input"></a>input</h2><h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><ul>
<li>for循环</li>
<li>while</li>
</ul>
<p>print(“我是%s，我今年%s岁了”)</p>
<p>%s 替换str,</p>
<p>%d 替换整数</p>
<h2 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h2><p>条件循环，当什么什么时候</p>
<p>for 知道循环次数</p>
<p>while 只知道循环条件，不知道多少次</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> i&lt;<span class="number">100</span>:</span><br><span class="line">	xxxxxx</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/02/17/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Python变量域</title>
    <url>/2020/02/10/Python%E5%8F%98%E9%87%8F%E5%9F%9F/</url>
    <content><![CDATA[<h2 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h2><ul>
<li>变量由作用域限制<ul>
<li>分类：按照作用域分类<ul>
<li>全局（global）:在函数外部定义</li>
<li>局部（local）：在函数内部定义</li>
</ul>
</li>
<li>变量的作用范围：<ul>
<li>全局变量：在整个全局范围都有效</li>
<li>全局变量可以在局部使用</li>
<li>局部变量在全局范围无法使用。</li>
</ul>
</li>
</ul>
</li>
<li>LEGB原则<ul>
<li>L(Local)局部作用域</li>
<li>E(Enclosing function local)外部嵌套作用域</li>
<li>G(Global module)函数定义所在模块作用域</li>
<li>B(Build in)python内置模块的作用域。</li>
</ul>
</li>
</ul>
<h2 id="局部变量提升为全局变量"><a href="#局部变量提升为全局变量" class="headerlink" title="局部变量提升为全局变量"></a>局部变量提升为全局变量</h2><ul>
<li><p>利用global生效。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a1 = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> a2</span><br><span class="line">    a2 = <span class="number">2</span></span><br><span class="line">fun()</span><br><span class="line">print(a2)  <span class="comment">#打印结果为2</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="globals-locals函数"><a href="#globals-locals函数" class="headerlink" title="globals, locals函数"></a>globals, locals函数</h2><ul>
<li>可以通过globals和locals显示出局部变量和全局变量</li>
</ul>
]]></content>
      <categories>
        <category>python基础</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
</search>
